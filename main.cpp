//#include <jni.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2\calib3d\calib3d.hpp>
#include <iostream>

using namespace std;
using namespace cv;

/*extern "C" {
    JNIEXPORT void JNICALL Java_org_opencv_samples_tutorial2_Tuturial2Activity_FindFeatures(JNIEnv*, jobject, jlong addrGray, jlong addrRgba);

    JNIEXPORT void JNICALL Java_org_opencv_samples_tutorial2_Tutorial2Activity_FindFeatures(JNIEnv*, jobject, jlong addrGray, jlong addrRgba)*/

Point2i twoRectsMatch(const Mat& integral,
    const Point2i& r1_min, const Point2i& r1_max,
    const Point2i& r2_min, const Point2i& r2_max,
    const Point2i& s1_min, const Point2i& s1_max,
    const Point2i& s2_min, const Point2i& s2_max,
    const Point2i& center_min, const Point2i& center_max);

int main(void)
{
    const int NUMRECT_DIM = 20;
    const int NUMRECT_PIX = NUMRECT_DIM * NUMRECT_DIM;

    float T[9][400] = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0028529, -0.0038524, -0.0031469, -0.0025199, -0.0011171, -0.00070553, -0.0013142, 0, -0.0013262, -0.0026489, -0.0034764, -0.0023478, -0.0023183, -0.00032485, 0, 0, -0.0025545, -0.008171, -0.0066676, -0.0046752, -0.017486, -0.017048, -0.020085, -0.013439, -0.010488, -0.009773, -0.014265, -0.017239, -0.039989, -0.055192, -0.064735, -0.051927, -0.030759, -0.016128, -0.0094562, -0.0028147, -0.014904, -0.037106, -0.059269, -0.08516, -0.082928, -0.12115, -0.14797, -0.10745, -0.093471, -0.090549, -0.10197, -0.13183, -0.18465, -0.21081, -0.24324, -0.20343, -0.14847, -0.099546, -0.078952, -0.042318, -0.056073, -0.10348, -0.19631, -0.24875, -0.2202, -0.28132, -0.32562, -0.29027, -0.25459, -0.26311, -0.30646, -0.30248, -0.31051, -0.37441, -0.47172, -0.42761, -0.38596, -0.28792, -0.17937, -0.080407, -0.12759, -0.23885, -0.38644, -0.32775, -0.18022, -0.12556, -0.27779, -0.37204, -0.4021, -0.4267, -0.46185, -0.38668, -0.35572, -0.41, -0.54145, -0.55487, -0.53124, -0.46178, -0.26124, -0.087703, -0.23024, -0.45763, -0.40655, -0.16672, -0.049653, 0.059133, -0.089541, -0.38433, -0.50102, -0.50604, -0.48595, -0.39236, -0.35517, -0.38726, -0.48541, -0.53868, -0.54032, -0.49785, -0.40609, -0.174, -0.36817, -0.51961, -0.3187, 0.031783, 0.28974, 0.2617, -0.033745, -0.41041, -0.50622, -0.48943, -0.40045, -0.29694, -0.30787, -0.3336, -0.36438, -0.38251, -0.46705, -0.50416, -0.48086, -0.27137, -0.42128, -0.41576, -0.098459, 0.35223, 0.56482, 0.51795, 0.14384, -0.11173, -0.2118, -0.15116, -0.085216, -0.0061568, -0.053942, -0.061469, -0.052601, 0.0069891, -0.058027, -0.24918, -0.34665, -0.27797, -0.315, -0.14007, 0.12725, 0.54079, 0.71285, 0.63841, 0.39029, 0.25615, 0.081367, 0.1066, 0.18115, 0.23351, 0.19783, 0.21368, 0.25873, 0.36391, 0.28889, 0.019875, -0.148, -0.14091, -0.04027, -0.00047691, 0.16342, 0.55009, 0.75919, 0.75985, 0.66582, 0.48642, 0.30435, 0.33989, 0.42531, 0.48606, 0.51338, 0.56726, 0.6292, 0.69655, 0.63427, 0.33783, 0.16868, 0.10625, 0.073525, 0.00053962, 0.10091, 0.45348, 0.67064, 0.68514, 0.60083, 0.37767, 0.21564, 0.22342, 0.28755, 0.41913, 0.52543, 0.66262, 0.70108, 0.70015, 0.53696, 0.23947, 0.17515, 0.20552, -0.16112, -0.40249, -0.38294, -0.16226, 0.01847, 0.11226, 0.063116, -0.15973, -0.24523, -0.29418, -0.21233, -0.094236, 0.067443, 0.13666, 0.14272, 0.06716, -0.050663, -0.14873, -0.075917, 0.093548, -0.42191, -0.73984, -0.80545, -0.69988, -0.59187, -0.53496, -0.5263, -0.60622, -0.66361, -0.69396, -0.69936, -0.5995, -0.48483, -0.46761, -0.46751, -0.49978, -0.56156, -0.49736, -0.32727, 0.0092276, -0.28463, -0.51016, -0.66643, -0.67174, -0.63722, -0.57132, -0.51428, -0.49676, -0.51427, -0.55712, -0.61751, -0.6098, -0.64207, -0.65532, -0.65437, -0.61879, -0.58101, -0.44373, -0.2226, 0.0028067, -0.16405, -0.23247, -0.34828, -0.42399, -0.44173, -0.38041, -0.33669, -0.27144, -0.24481, -0.29492, -0.38613, -0.46741, -0.55578, -0.60769, -0.58476, -0.48901, -0.39372, -0.21833, -0.039309, 0.031042, -0.077798, -0.097648, -0.10537, -0.13319, -0.13527, -0.12303, -0.12252, -0.098206, -0.089519, -0.11222, -0.16417, -0.22515, -0.30062, -0.3695, -0.35931, -0.21908, -0.10834, -0.03673, -0.0043251, 0.0031396, -0.013166, -0.017599, -0.017331, -0.015677, -0.018004, -0.017701, -0.016759, -0.014699, -0.013817, -0.010339, -0.02208, -0.032599, -0.05621, -0.080689, -0.073899, -0.034273, -0.0083167, -0.008678, -0.0091601, -0.0053973, 0, -0.0011288, -0.0011288, 0, 0, 0, 0, 0, 0, 0, -0.0001999, -0.0013523, -0.0044919, -0.0069142, -0.0070553, -0.00092895, 0, -0.0013523, -0.0013523, -0.0013523, 0, -0.00014111, -0.00014111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0030205, -0.0044198, -0.003432, -0.0026714, -0.0015639, -0.00098774, -0.0010375, 0, -0.001406, -0.0025005, -0.0030819, -0.0018535, -0.0018302, -0.00025646, 0, 0, -0.0020167, -0.0077071, -0.0073243, -0.0023984, -0.012679, -0.014365, -0.017761, -0.012306, -0.012394, -0.01114, -0.013939, -0.018176, -0.039037, -0.05264, -0.060411, -0.029163, -0.0077228, 0.0066206, 0.048434, 0.0052909, -0.032505, -0.053256, -0.029842, 0.073879, 0.10738, 0.10543, 0.088343, -0.019572, -0.092365, -0.089455, -0.099192, -0.13116, -0.18057, -0.20437, -0.15987, 0.014008, 0.11685, 0.26227, 0.36481, 0.26591, -0.091349, -0.026668, 0.11364, 0.16671, 0.19974, 0.22885, 0.11338, -0.088591, -0.25276, -0.26181, -0.29459, -0.30229, -0.30938, -0.29225, -0.22428, 0.036566, 0.28192, 0.45749, 0.60429, 0.48504, -0.1373, 0.033496, 0.27322, 0.26483, 0.18712, 0.1443, 0.024317, -0.2124, -0.39954, -0.42319, -0.45582, -0.3858, -0.28616, -0.16846, -0.011125, 0.17663, 0.31505, 0.3778, 0.58183, 0.55895, -0.056321, 0.19337, 0.24965, 0.23818, 0.12024, 0.0030475, -0.15112, -0.36748, -0.50386, -0.5082, -0.4876, -0.35672, -0.057326, 0.17054, 0.28871, 0.34538, 0.35781, 0.29918, 0.36138, 0.44025, 0.066531, 0.21456, 0.21705, 0.15547, -0.030277, -0.22999, -0.27688, -0.41535, -0.50633, -0.48949, -0.36407, -0.12047, 0.22004, 0.43399, 0.47411, 0.38475, 0.25669, 0.25822, 0.2493, 0.28041, 0.17004, 0.2005, 0.21439, 0.002395, -0.20354, -0.27558, -0.30075, -0.40532, -0.49663, -0.42509, -0.24776, 0.12644, 0.40231, 0.47777, 0.42602, 0.30479, 0.15881, 0.22735, 0.21667, 0.1454, 0.18284, 0.1653, 0.078844, -0.14216, -0.22667, -0.23425, -0.25494, -0.37011, -0.52672, -0.39524, -0.049745, 0.38282, 0.52507, 0.44673, 0.20869, 0.026882, 0.13949, 0.27265, 0.19938, 0.15997, 0.13258, 0.085859, -0.013856, -0.11946, -0.21101, -0.21115, -0.24254, -0.36883, -0.54856, -0.28287, 0.096402, 0.46302, 0.49494, 0.31075, -0.11298, -0.17268, 0.037869, 0.25296, 0.19309, 0.1554, -0.036934, 0.0128, 0.0054679, -0.0064721, -0.075993, -0.16845, -0.25531, -0.43259, -0.45153, -0.15115, 0.20189, 0.40331, 0.39022, -0.055413, -0.25421, -0.28281, -0.13494, 0.11655, 0.14174, 0.13525, -0.031786, 0.040579, 0.044622, 0.035745, 0.063226, -0.06582, -0.18247, -0.28509, -0.14757, 0.070774, 0.21408, 0.23956, 0.00053626, -0.28646, -0.35137, -0.41815, -0.30048, 0.096846, 0.19331, 0.21267, -0.12948, 0.061854, 0.12382, 0.16511, 0.11459, 0.085118, 0.083723, 0.14726, 0.1366, 0.21407, 0.14953, -0.08826, -0.43149, -0.50315, -0.51742, -0.57183, -0.34759, 0.13374, 0.31489, 0.44629, -0.17522, 0.025293, 0.17713, 0.30034, 0.32252, 0.35356, 0.38959, 0.43554, 0.43354, 0.23239, -0.13438, -0.51564, -0.6289, -0.64719, -0.64998, -0.6225, -0.29388, 0.31342, 0.58653, 0.61404, -0.11594, -0.061081, 0.13204, 0.32318, 0.41535, 0.4913, 0.52297, 0.50427, 0.41765, 0.11996, -0.27969, -0.463, -0.55407, -0.61306, -0.59186, -0.49445, -0.1017, 0.52062, 0.71955, 0.63465, -0.071387, -0.090053, -0.033948, 0.10903, 0.26337, 0.28208, 0.3015, 0.23162, 0.10093, -0.038765, -0.1446, -0.23278, -0.30583, -0.38021, -0.36832, -0.2238, -0.025669, 0.30632, 0.36024, 0.32443, -0.015871, -0.020527, -0.0015816, 0.031756, 0.068651, 0.074646, 0.077083, 0.078642, 0.035252, -0.0085342, -0.02581, -0.03812, -0.064657, -0.093718, -0.086555, -0.040274, -0.011211, 0.065471, 0.092517, 0.054513, 0, -0.0015804, -0.0015804, 0, 0, 0, 0, 0, 0, 0, -0.00027986, -0.0018932, -0.0062886, -0.0096799, -0.0098774, -0.0013005, 0, 0.013658, 0.013658, 0.013658, 0, -0.00019755, -0.00019755, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0028985, -0.0040068, -0.0032245, -0.0025611, -0.0012387, -0.00078231, -0.0012389, 0, -0.0013479, -0.0026085, 0.0047048, 0.0058605, 0.0056576, -0.00030625, 0, 0, -0.0024082, -0.0080448, 0.00053549, 0.010046, 0.02682, -0.0027318, -0.013248, -0.013867, -0.011007, -0.010145, -0.014176, -0.017494, -0.03973, 0.0043255, 0.044861, 0.046674, 0.039489, 0.013586, -0.0093423, -0.002964, -0.032653, -0.02055, 0.0098573, 0.069226, 0.089104, 0.053815, -0.051096, -0.1024, -0.093171, -0.090252, -0.10122, -0.13164, -0.18354, -0.032357, 0.082323, 0.11566, 0.13491, 0.054048, 0.058228, -0.0069615, -0.050004, 0.00077026, 0.11687, 0.19397, 0.20892, 0.13811, -0.072949, -0.27859, -0.25415, -0.26276, -0.30323, -0.30243, -0.30974, -0.056118, 0.17723, 0.19399, 0.27789, 0.19716, 0.083037, -0.020379, -0.0018323, 0.1056, 0.18417, 0.25843, 0.15874, 0.051629, -0.12133, -0.41256, -0.4021, -0.42574, -0.46021, -0.38699, -0.35303, -0.18581, 0.13219, 0.1617, 0.24221, 0.33847, 0.1898, 0.040965, 0.0049208, 0.19526, 0.20656, 0.13983, 0.076895, -0.036792, -0.27262, -0.48126, -0.46811, -0.42428, -0.46495, -0.39278, -0.35298, -0.2633, -0.067353, 0.072128, 0.13648, 0.27264, 0.24164, 0.08595, 0.10442, 0.18111, 0.18366, 0.10995, -0.098518, -0.17869, -0.32886, -0.42669, -0.35112, -0.19556, -0.23657, -0.29088, -0.30629, -0.3094, -0.28231, -0.12299, 0.018796, 0.16049, 0.23948, 0.13262, 0.18452, 0.18398, 0.07391, -0.10001, -0.18979, -0.25409, -0.30255, -0.37154, -0.15251, 0.16594, 0.025207, -0.2575, -0.35805, -0.36746, -0.33895, -0.2477, -0.12722, 0.099408, 0.18955, 0.19826, 0.22087, 0.16937, 0.078465, -0.1749, -0.23991, -0.23865, -0.25962, -0.30737, 0.13185, 0.45661, 0.21878, -0.252, -0.4103, -0.39625, -0.3438, -0.23525, -0.14186, 0.064049, 0.19541, 0.25212, 0.17187, 0.089161, 0.024373, -0.16793, -0.18882, -0.16201, -0.23815, -0.26229, 0.20164, 0.38298, 0.19511, -0.2908, -0.4439, -0.40087, -0.32534, -0.2346, -0.13548, 0.12535, 0.22717, 0.21266, -0.0048806, 0.0081248, -0.0022738, -0.042754, -0.11699, -0.15856, -0.17016, -0.16146, 0.12577, 0.2264, 0.14193, -0.2203, -0.3276, -0.30627, -0.24709, -0.19451, -0.1385, 0.13975, 0.15964, 0.08335, -0.11885, -0.0070027, 0.073094, 0.12889, 0.07056, 0.028376, 0.014168, 0.036267, 0.090954, 0.17065, 0.19749, -0.034631, -0.089843, -0.12735, -0.12218, -0.028394, 0.054055, 0.15449, 0.13025, 0.0028967, -0.28449, -0.11883, 0.082422, 0.23261, 0.21142, 0.18675, 0.179, 0.17213, 0.087916, 0.065685, 0.22359, 0.20985, 0.19662, 0.18156, 0.14516, 0.20732, 0.23214, 0.17133, 0.067584, -0.068626, -0.2346, -0.161, -0.02374, 0.17799, 0.22768, 0.25687, 0.32463, 0.28251, -0.0045654, -0.045162, 0.20275, 0.34066, 0.30737, 0.27619, 0.27624, 0.28977, 0.27644, 0.21254, 0.033802, -0.10015, -0.16327, -0.13508, 0.024842, 0.15944, 0.22576, 0.3035, 0.29695, 0.10274, -0.10498, -0.11103, 0.099869, 0.30122, 0.25449, 0.21311, 0.22219, 0.33523, 0.31799, 0.19796, -0.001023, -0.081325, -0.076606, -0.087622, -0.050462, 0.039767, 0.088796, 0.1268, 0.083033, 0.01131, -0.039896, -0.10956, -0.014583, 0.088344, 0.087121, 0.094139, 0.12036, 0.19267, 0.18032, 0.044935, -0.0426, -0.040635, -0.013902, -0.018395, -0.010925, -0.0011565, 0.019753, 0.024589, 0.011022, 0.0098543, 0.0011436, -0.0039948, 0.0014727, 0.0069602, 0.039416, 0.049907, 0.03696, 0.05233, 0.032418, 0.0092934, -0.010157, -0.0059847, 0, -0.0012517, -0.0012517, 0, 0, 0, 0, 0, 0, 0, -0.00022165, -0.0014994, 0.021432, 0.018746, 0.01859, -0.00103, 0, -0.0014994, -0.0014994, -0.0014994, 0, -0.00015646, -0.00015646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0029324, -0.0041216, -0.0032822, -0.0025917, -0.001329, -0.0008394, -0.0011829, 0, 0.0086912, 0.016627, 0.013905, -0.0021133, -0.0020868, -0.00029241, 0, 0, -0.0022994, -0.0079509, -0.0069791, -0.0047498, -0.017258, -0.017828, -0.021035, -0.014185, -0.011392, -0.010421, -0.0085799, 0.03923, 0.15403, 0.16351, 0.15411, 0.014713, -0.022907, -0.0156, -0.0092576, -0.0030751, -0.032778, -0.054292, -0.068857, -0.088372, -0.12898, -0.15404, -0.14236, -0.10337, -0.079473, -0.071026, 0.051382, 0.28528, 0.53533, 0.59818, 0.47323, 0.052085, -0.1319, -0.098609, -0.078076, -0.041204, -0.096572, -0.17672, -0.27961, -0.34058, -0.39365, -0.41879, -0.36118, -0.28399, -0.20656, -0.019557, 0.33557, 0.59907, 0.65755, 0.61605, 0.45646, -0.083563, -0.37267, -0.30207, -0.20932, -0.10706, -0.17228, -0.34326, -0.5501, -0.60505, -0.58892, -0.58987, -0.4981, -0.30886, -0.014673, 0.26858, 0.48731, 0.57829, 0.58833, 0.58311, 0.39067, -0.18551, -0.54173, -0.56502, -0.38784, -0.19629, -0.2714, -0.59899, -0.74006, -0.66218, -0.56546, -0.47253, -0.23702, 0.13032, 0.37466, 0.46599, 0.38566, 0.27126, 0.35171, 0.59841, 0.48313, -0.10335, -0.57423, -0.69118, -0.63439, -0.36651, -0.43054, -0.72741, -0.73712, -0.54032, -0.23147, 0.080663, 0.37075, 0.50902, 0.42334, 0.24418, -0.053869, -0.14631, 0.19976, 0.62494, 0.57972, 0.02453, -0.50329, -0.70014, -0.74796, -0.53651, -0.58421, -0.74171, -0.62316, -0.19045, 0.39378, 0.60269, 0.66537, 0.49137, 0.13683, -0.2205, -0.32768, -0.2635, 0.11536, 0.5852, 0.59483, 0.13375, -0.3652, -0.64893, -0.78168, -0.67688, -0.66884, -0.64729, -0.34635, 0.31615, 0.66248, 0.70315, 0.55807, 0.06073, -0.38145, -0.4599, -0.4189, -0.33317, 0.070838, 0.55867, 0.62224, 0.14888, -0.29414, -0.5937, -0.76191, -0.70078, -0.5436, -0.34363, -0.0067212, 0.51324, 0.67357, 0.46553, 0.12074, -0.18674, -0.45121, -0.45546, -0.39618, -0.28435, 0.14432, 0.57608, 0.642, 0.25751, -0.14627, -0.45457, -0.60374, -0.58292, -0.15207, -0.060745, 0.11164, 0.45361, 0.58613, 0.49119, 0.30872, 0.10431, -0.05167, -0.065798, 0.011316, 0.16648, 0.38752, 0.64567, 0.68597, 0.52646, 0.26874, -0.055173, -0.11695, -0.10634, 0.26522, 0.057616, 0.097167, 0.33895, 0.47963, 0.50657, 0.44414, 0.22364, 0.13742, 0.12826, 0.18397, 0.34503, 0.53488, 0.64113, 0.64666, 0.55948, 0.38029, 0.18218, 0.17475, 0.39331, 0.4198, 0.19091, 0.117, 0.22093, 0.34087, 0.38937, 0.38299, 0.26704, 0.21799, 0.2212, 0.20552, 0.30508, 0.45247, 0.4887, 0.47847, 0.41487, 0.27653, 0.18581, 0.27301, 0.4773, 0.15263, 0.029251, -0.11256, -0.16543, -0.12658, -0.05188, -0.0089334, -0.00077957, -0.00082026, -0.057236, -0.14196, -0.097686, 0.16902, 0.34804, 0.34591, 0.12153, -0.047465, -0.092235, 0.091627, 0.25165, -0.051471, -0.1247, -0.25085, -0.33593, -0.33461, -0.27092, -0.24032, -0.18112, -0.15465, -0.20466, -0.28706, -0.33598, -0.035212, 0.34582, 0.36824, -0.070878, -0.27074, -0.22552, -0.099954, -0.067244, -0.075719, -0.09706, -0.10838, -0.14133, -0.14258, -0.12946, -0.12832, -0.10333, -0.0945, -0.11503, -0.16881, -0.19599, -0.015007, 0.34096, 0.37035, 0.013875, -0.11434, -0.078653, -0.050247, -0.041812, -0.014449, -0.018988, -0.019033, -0.018514, -0.021352, -0.020786, -0.019199, -0.016735, -0.015686, -0.011343, -0.023849, -0.012795, 0.062458, 0.20876, 0.20587, 0.04101, -0.008684, -0.010325, -0.010898, -0.0064214, 0, -0.001343, -0.001343, 0, 0, 0, 0, 0, 0, 0, -0.00023783, -0.0016088, -0.0015232, 0.016309, 0.017348, 0.0028164, 0, -0.0016088, -0.0016088, -0.0016088, 0, -0.00016788, -0.00016788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0028896, -0.0039765, -0.0032093, -0.002553, -0.0012148, -0.00076726, 0.0096532, 0, -0.0013437, -0.0026164, -0.0028999, 0.0086672, 0.0086953, 0.0023862, 0, 0, -0.0024369, -0.0080695, -0.0068113, -0.0047096, -0.017381, -0.017408, -0.020523, -0.013783, -0.010905, -0.0066407, 0.020488, -0.017444, -0.039781, -0.053164, -0.050432, 0.027453, 0.038707, 0.012056, -0.0093646, -0.0029348, -0.032911, -0.018888, -0.033904, -0.052559, -0.087441, -0.11289, -0.068545, -0.023759, -0.0011951, 0.023048, -0.013742, -0.12715, -0.18376, -0.1969, -0.077132, 0.067797, 0.1009, 0.082014, 0.0089516, -0.013128, 0.022105, 0.0814, -0.015593, -0.03927, -0.072863, -0.065117, 0.050779, 0.22006, 0.23632, 0.20519, 0.011576, -0.2832, -0.31026, -0.30738, -0.031428, 0.049972, 0.22158, 0.21679, 0.16377, 0.016087, 0.21466, 0.11192, -0.010557, -0.028418, 0.11018, 0.20897, 0.32858, 0.4732, 0.42743, 0.33865, 0.064837, -0.34796, -0.35541, -0.34727, -0.060134, 0.060946, 0.24818, 0.37816, 0.22365, 0.025971, 0.36927, 0.2317, 0.092258, 0.14649, 0.2432, 0.30853, 0.41955, 0.50552, 0.41969, 0.29802, 0.070429, -0.36513, -0.35341, -0.33486, -0.16907, 0.0086502, 0.15235, 0.26945, 0.27061, 0.077751, 0.32978, 0.1684, 0.19352, 0.16498, 0.22217, 0.21761, 0.30068, 0.54536, 0.43297, 0.1896, -0.10035, -0.24641, -0.3066, -0.33129, -0.25739, -0.12917, 0.078989, 0.16274, 0.23425, 0.13167, 0.25226, 0.21662, 0.21376, 0.082778, 0.0044044, 0.0053365, 0.21705, 0.52455, 0.4436, 0.070281, -0.27171, -0.28137, -0.35792, -0.36633, -0.32714, -0.21368, -0.022625, 0.10882, 0.20981, 0.18989, 0.15975, 0.17215, 0.1775, -0.098258, -0.22255, -0.11544, 0.27742, 0.57663, 0.42965, -0.129, -0.38666, -0.37288, -0.41084, -0.39584, -0.34365, -0.23379, -0.13072, 0.041058, 0.22178, 0.21158, 0.077033, 0.089403, 0.1131, -0.12442, -0.23507, -0.16139, 0.22857, 0.50832, 0.3437, -0.035435, -0.48577, -0.4792, -0.45141, -0.39856, -0.32322, -0.22475, -0.069888, 0.045414, 0.23259, 0.13234, 0.04266, 0.0231, 0.046132, -0.21144, -0.31113, -0.29713, 0.0012719, 0.30093, 0.21047, -0.0038381, -0.3827, -0.49969, -0.42885, -0.27976, -0.23741, -0.11567, 0.030398, 0.14881, 0.16043, -0.001766, 0.18736, 0.078533, 0.022706, -0.34905, -0.51292, -0.46137, -0.30677, 0.12482, 0.16974, 0.08737, -0.13593, -0.27157, -0.13284, -0.12771, -0.070597, 0.093346, 0.15508, 0.19304, 0.076125, -0.090903, 0.39188, 0.223, 0.073159, -0.45502, -0.63859, -0.59002, -0.51297, -0.1637, 0.16948, 0.21794, 0.13756, 0.067866, 0.12065, 0.15332, 0.18443, 0.22877, 0.25175, 0.15941, 0.025876, -0.15073, 0.46067, 0.39264, 0.12703, -0.47613, -0.63771, -0.57323, -0.51453, -0.34853, 0.10426, 0.32005, 0.37716, 0.36351, 0.30414, 0.27489, 0.2912, 0.32341, 0.26636, 0.11636, 0.012007, -0.12965, 0.253, 0.2771, 0.092741, -0.32198, -0.44403, -0.38454, -0.34006, -0.23928, -0.017745, 0.1929, 0.33097, 0.38301, 0.35767, 0.25842, 0.20842, 0.2283, 0.15244, 0.066773, -0.074284, -0.079853, 0.03946, 0.048457, 0.019224, -0.10814, -0.13864, -0.12599, -0.1252, -0.092728, -0.031522, 0.073618, 0.16543, 0.21865, 0.22128, 0.18134, 0.13051, 0.13761, 0.071688, -0.0043935, -0.034216, -0.040324, -0.013757, -0.018239, -0.018116, -0.016985, -0.019548, -0.019124, -0.017884, -0.015638, -0.014679, -0.010802, 0.035928, 0.067787, 0.076747, 0.033005, 0.022965, 0.012086, -0.0089498, -0.0094373, -0.0099616, -0.0058696, 0, -0.0012276, -0.0012276, 0, 0, 0, 0, 0, 0, 0, 0.0018659, 0.012623, 0.0092082, 0.006574, 0.0064205, 0.0038917, 0, -0.0014706, -0.0014706, -0.0014706, 0, -0.00015345, -0.00015345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0091134, 0.0081179, 0.0013198, -0.0025663, -0.001254, -0.00079201, -0.0012294, 0, -0.0013507, -0.0026034, -0.0033555, -0.0021963, -0.0021687, -0.0003039, 0, 0, -0.0023897, -0.0080288, -0.0068689, -0.0047234, 0.014919, 0.014706, 0.024083, 0.026307, 0.041173, 0.042054, 0.038081, 0.034719, 0.012548, -0.0021649, -0.019514, -0.017997, -0.025662, -0.015787, -0.0093279, -0.0029829, -0.032865, -0.043996, -0.02913, -0.021399, -0.021743, 0.050725, 0.12397, 0.2221, 0.28372, 0.34268, 0.35416, 0.32176, 0.28188, 0.079461, 0.0064172, 0.016785, -0.071737, -0.093375, -0.078386, -0.041598, -0.091687, -0.14728, -0.14266, -0.069397, 0.11226, 0.25162, 0.40991, 0.51299, 0.5908, 0.59383, 0.58484, 0.56905, 0.56409, 0.45099, 0.3163, 0.16615, 0.018723, -0.10205, -0.16256, -0.10335, -0.13197, -0.19883, -0.093165, 0.12334, 0.23306, 0.27388, 0.35953, 0.49227, 0.5979, 0.57438, 0.51988, 0.574, 0.58336, 0.52649, 0.39825, 0.39642, 0.28034, -0.024414, -0.17437, -0.18445, -0.1596, -0.15065, 0.054903, 0.17365, 0.25235, 0.25807, 0.2422, 0.26042, 0.40349, 0.47748, 0.48192, 0.46725, 0.40074, 0.36706, 0.27311, 0.34891, 0.37569, 0.25336, -0.050617, -0.22225, -0.095145, 0.081545, 0.076487, 0.18624, 0.20888, 0.10728, 0.015054, 0.16604, 0.46086, 0.49335, 0.35699, 0.16014, 0.0428, 0.037001, 0.04892, 0.21154, 0.31462, 0.27896, 0.18915, -0.10804, -0.0063937, 0.093962, 0.11369, 0.19613, 0.024783, -0.042262, -0.0098671, 0.25871, 0.49334, 0.39209, -0.0054001, -0.20309, -0.26035, -0.25323, -0.2213, -0.043767, 0.11798, 0.16606, 0.20506, 0.082933, 0.081823, 0.070936, 0.046925, 0.022575, -0.071655, -0.16001, -0.094184, 0.35192, 0.45904, 0.18374, -0.27512, -0.36939, -0.40482, -0.39006, -0.33745, -0.22161, -0.052641, 0.017148, 0.19951, 0.17308, 0.079822, 0.018543, -0.062186, -0.17633, -0.20362, -0.20692, -0.075106, 0.40197, 0.34249, -0.0093591, -0.36644, -0.46463, -0.45354, -0.4011, -0.30102, -0.23464, -0.12338, -0.0010704, 0.16043, 0.25443, 0.077335, 0.018609, -0.12588, -0.33215, -0.30679, -0.31251, -0.21873, 0.23216, 0.21002, -0.076698, -0.47117, -0.52366, -0.44336, -0.3065, -0.23756, -0.21055, -0.16635, -0.031248, 0.09401, 0.22596, 0.10168, 0.078325, -0.086206, -0.2892, -0.35939, -0.43181, -0.41964, 0.034718, 0.1772, 0.019749, -0.18899, -0.26423, -0.19541, -0.087272, -0.071226, -0.089242, 0.028234, 0.073458, 0.1553, 0.050589, 0.16608, 0.15807, -0.049457, -0.15329, -0.24462, -0.51722, -0.55636, -0.23492, 0.1543, 0.2352, 0.11254, -0.0020626, 0.039188, 0.035558, 0.0349, 0.14574, 0.21423, 0.20448, 0.1743, -0.031908, 0.026582, 0.19241, 0.1374, 0.051671, -0.093952, -0.44269, -0.50275, -0.37079, 0.040402, 0.3864, 0.3726, 0.37993, 0.29872, 0.28658, 0.26829, 0.33744, 0.3303, 0.28805, 0.0898, -0.12459, -0.0053059, -0.0024081, 0.11851, 0.061376, -0.017252, -0.28626, -0.34141, -0.26239, -0.059267, 0.27, 0.42615, 0.43373, 0.37375, 0.32058, 0.29934, 0.36511, 0.35271, 0.1583, -0.040254, -0.085359, -0.035215, -0.062227, -0.027236, 0.05409, 0.056338, -0.083285, -0.12627, -0.10152, -0.084388, 0.045991, 0.1778, 0.31293, 0.31815, 0.29047, 0.265, 0.20351, 0.12844, -0.004296, -0.039233, -0.040835, -0.013995, -0.018496, -0.018431, -0.0014441, -0.0041008, -0.0084357, -0.018336, -0.016014, -0.015024, -0.010988, -0.0034887, 0.014033, 0.013941, -0.01207, -0.0093394, 0.0020915, 0.0036996, -0.0097418, -0.010283, -0.0060589, 0, -0.0012672, -0.0012672, 0, 0, 0, 0, 0, 0, 0, -0.0002244, -0.001518, -0.0050425, -0.0077617, -0.0079201, -0.0010428, 0, -0.001518, -0.001518, -0.001518, 0, -0.0001584, -0.0001584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0028795, -0.0039423, -0.0031921, -0.0025439, -0.0011878, -0.00075021, -0.0012704, 0, -0.0013389, -0.0026254, -0.0034139, -0.0022696, -0.002241, -0.00031403, 0, 0, 0.020145, 0.061053, 0.030745, -0.0047001, -0.01741, -0.017308, -0.020402, -0.013688, -0.01079, -0.0099894, -0.014213, -0.017387, -0.039839, -0.054788, -0.064051, -0.051063, -0.030152, -0.015952, -0.0093899, -0.0029016, 0.26549, 0.34077, 0.27297, 0.038568, -0.1219, -0.15817, -0.1461, -0.10666, -0.093296, -0.090376, -0.10153, -0.13172, -0.184, -0.20979, -0.24098, -0.20031, -0.1468, -0.099233, -0.07866, -0.041946, 0.56696, 0.63108, 0.46958, -0.0075238, -0.34229, -0.42198, -0.36154, -0.30329, -0.2546, -0.26291, -0.30458, -0.30245, -0.31033, -0.37397, -0.46934, -0.42423, -0.38485, -0.27012, -0.17441, -0.10768, 0.66015, 0.63072, 0.36522, -0.22632, -0.56565, -0.59297, -0.52687, -0.43535, -0.4021, -0.42614, -0.4609, -0.38686, -0.34805, -0.40203, -0.53182, -0.53847, -0.50584, -0.49385, -0.29185, -0.12723, 0.55136, 0.40032, 0.18651, -0.27524, -0.59107, -0.55593, -0.50017, -0.48592, -0.50147, -0.50638, -0.48621, -0.39261, -0.31874, -0.32498, -0.34985, -0.30983, -0.21019, -0.21116, -0.099029, 0.13408, 0.37211, 0.2753, 0.16326, -0.20769, -0.42798, -0.37429, -0.37618, -0.43611, -0.50624, -0.48865, -0.31721, -0.14777, -0.022899, 0.10363, 0.26615, 0.37559, 0.29701, 0.13614, 0.094071, 0.25701, 0.16837, 0.20629, 0.18795, -0.094109, -0.26348, -0.27568, -0.30283, -0.37334, -0.43754, -0.27447, -0.0079648, 0.2802, 0.39739, 0.47142, 0.56377, 0.63011, 0.53644, 0.26758, 0.14258, 0.18758, 0.052049, 0.17268, 0.15693, -0.004733, -0.2345, -0.23855, -0.24453, -0.18999, -0.15572, 0.13266, 0.35738, 0.49521, 0.48868, 0.51613, 0.59051, 0.66721, 0.56296, 0.21265, -0.073813, -0.18483, -0.020771, 0.089677, 0.090908, 0.00019413, -0.21441, -0.10801, 0.12314, 0.15749, 0.14196, 0.23402, 0.37487, 0.47866, 0.4125, 0.42158, 0.37316, 0.33661, 0.074518, -0.35694, -0.55748, -0.53137, 0.015363, 0.023862, 0.034717, -0.011253, -0.032864, 0.23995, 0.38236, 0.23974, 0.15627, 0.12607, 0.10796, 0.1064, 0.047631, 0.017599, -0.085911, -0.156, -0.37831, -0.71661, -0.79305, -0.65509, 0.15858, 0.079395, 0.065469, 0.037516, 0.23612, 0.38475, 0.42219, 0.19851, 0.0046613, -0.11264, -0.39811, -0.34468, -0.34418, -0.29309, -0.35083, -0.42306, -0.59983, -0.79439, -0.79985, -0.55826, 0.33633, 0.22087, 0.14331, 0.13259, 0.25153, 0.38898, 0.31889, -0.045102, -0.34985, -0.5601, -0.64308, -0.62664, -0.53879, -0.51489, -0.52401, -0.57606, -0.67453, -0.75906, -0.67473, -0.34915, 0.54551, 0.48061, 0.3315, 0.29379, 0.26556, 0.20625, -0.09538, -0.31468, -0.45357, -0.53388, -0.60125, -0.61138, -0.64135, -0.65403, -0.65367, -0.61938, -0.60402, -0.58283, -0.38564, -0.17994, 0.59208, 0.71404, 0.57688, 0.40234, 0.12027, -0.19869, -0.28449, -0.24376, -0.24633, -0.29638, -0.3875, -0.46861, -0.55598, -0.60854, -0.58588, -0.48987, -0.40879, -0.31171, -0.14568, -0.09021, 0.48747, 0.62582, 0.52565, 0.28658, -0.015356, -0.11602, -0.12276, -0.09861, -0.091181, -0.11316, -0.16572, -0.22636, -0.30144, -0.37119, -0.36074, -0.21983, -0.11692, -0.074417, -0.047851, -0.039973, 0.12327, 0.16233, 0.1353, 0.063507, -0.0029121, -0.018731, -0.017574, -0.015378, -0.014441, -0.010674, -0.022671, -0.033473, -0.057547, -0.082752, -0.075903, -0.035223, -0.0087749, -0.0092276, -0.0097403, -0.0057391, 0, 0.011349, 0.011349, 0, 0, 0, 0, 0, 0, 0, -0.00021256, -0.0014379, -0.0047764, -0.0073521, -0.0075021, -0.00098778, 0, -0.0014379, -0.0014379, -0.0014379, 0, 0.0014186, 0.0014186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0028852, -0.0039619, -0.0032019, -0.0025491, -0.0012033, -0.00075996, -0.0012608, 0, -0.0013416, -0.0026203, -0.0034003, -0.0022525, -0.0022242, -0.00031166, 0, 0, -0.0024508, -0.0080815, -0.0067943, 0.00022444, 0.00042202, 0.00045004, -0.0026564, -0.011502, -0.010856, -0.010037, 0.00058808, 0.00039548, 0.025404, 0.045804, 0.0589, 0.038537, 0.0093085, -0.0047091, -0.0093755, -0.0029205, -0.032924, -0.054846, -0.042793, -0.0016281, 0.053658, 0.062789, 0.026299, -0.052817, -0.093258, -0.088994, -0.020316, 0.050712, 0.11563, 0.16477, 0.16657, 0.13203, 0.13995, 0.0029078, -0.063582, -0.041865, -0.095168, -0.10755, 0.013976, 0.10609, 0.16083, 0.15921, 0.078719, 0.00012629, -0.16094, -0.16852, 0.0011497, 0.23324, 0.365, 0.42355, 0.3761, 0.38614, 0.31377, 0.050872, -0.070664, -0.082518, -0.15664, -0.027952, 0.11004, 0.27268, 0.3601, 0.37857, 0.38524, 0.33389, 0.032519, -0.091456, 0.15242, 0.42486, 0.54561, 0.53327, 0.41683, 0.42124, 0.3805, 0.2779, 0.081222, -0.048497, -0.057412, 0.12353, 0.25206, 0.28101, 0.35354, 0.36723, 0.43275, 0.48044, 0.3251, 0.18867, 0.33737, 0.49574, 0.47719, 0.32562, 0.23568, 0.27975, 0.32288, 0.28882, 0.16486, -0.028179, 0.061448, 0.22451, 0.20446, 0.15767, 0.14, 0.19366, 0.35454, 0.46266, 0.49286, 0.43684, 0.52528, 0.40263, 0.072857, -0.076565, -0.19705, -0.079621, 0.18727, 0.27106, 0.18773, 0.025359, 0.18093, 0.20896, 0.045194, -0.060734, -0.16061, -0.14906, -0.018153, 0.17209, 0.4887, 0.55101, 0.48314, 0.045366, -0.27853, -0.35197, -0.33151, -0.2389, 0.024957, 0.096817, 0.15366, 0.089949, 0.21408, 0.091254, -0.099189, -0.21687, -0.24141, -0.23913, -0.22898, -0.038377, 0.44709, 0.49587, 0.25866, -0.1726, -0.41071, -0.39564, -0.34357, -0.22672, -0.096748, -0.02333, 0.12389, 0.20047, 0.16288, 0.0016774, -0.17112, -0.26098, -0.23838, -0.21153, -0.27327, -0.22528, 0.31736, 0.37807, 0.1921, -0.17765, -0.42072, -0.39687, -0.32511, -0.23274, -0.13542, -0.020526, 0.12822, 0.24285, 0.089015, -0.020971, -0.16305, -0.24117, -0.25434, -0.26856, -0.31416, -0.1242, 0.21195, 0.22195, 0.10603, -0.17602, -0.25848, -0.28855, -0.28679, -0.26072, -0.15583, -0.0080799, 0.11239, 0.20896, -0.18895, 0.023524, 0.031985, 0.0050804, -0.11448, -0.081157, 0.063291, 0.14101, 0.14072, 0.08811, 0.12336, 0.015625, -0.0083151, -0.025815, -0.13998, -0.16034, -0.059504, 0.050192, 0.15191, 0.043747, -0.26002, 0.032147, 0.1251, 0.2079, 0.20603, 0.277, 0.35374, 0.26897, 0.0796, 0.0049944, 0.13696, 0.27299, 0.2229, 0.13816, 0.095534, 0.11498, 0.18369, 0.23707, 0.22558, -0.11358, -0.23496, -0.214, 0.066061, 0.23389, 0.32291, 0.38128, 0.41492, 0.31804, -0.059737, -0.16689, 0.10724, 0.27074, 0.30715, 0.25964, 0.26166, 0.34867, 0.38971, 0.34455, 0.085958, -0.14603, -0.1469, -0.17053, -0.11974, 0.18373, 0.29294, 0.35276, 0.25104, 0.047442, -0.16409, -0.21289, -0.0066216, 0.17135, 0.29776, 0.29906, 0.33925, 0.4333, 0.42977, 0.12917, -0.088608, -0.088731, -0.076953, -0.094047, -0.079254, 0.001092, 0.04977, 0.028419, -0.0037595, -0.05861, -0.085157, -0.10272, -0.09659, -0.035362, 0.085379, 0.1174, 0.1678, 0.1474, 0.073392, -0.035664, -0.044752, -0.040174, -0.013687, -0.018163, -0.018023, -0.011228, 0.0056211, 0.0060304, 0.0072347, -0.0061148, -0.014577, -0.010748, -0.0058807, -0.0086777, -0.023441, -0.015079, -0.012474, 0.016446, 0.016111, -0.0093475, -0.0098668, -0.0058137, 0, -0.0012159, -0.0012159, 0, 0, 0, 0, 0, 0, 0, -0.00021532, -0.0014566, -0.0048384, -0.0074476, -0.0075996, -0.0010006, 0, -0.0014566, -0.0014566, -0.0014566, 0, -0.00015199, -0.00015199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.012685, 0.022313, 0.023268, 0.022183, 0.010907, 0.0068883, -0.0010698, 0, -0.0013967, -0.0025178, -0.0031279, -0.0019112, -0.0018872, -0.00026444, 0, 0, -0.0020795, 8.192e-05, 0.013537, 0.01597, 0.041238, 0.076794, 0.099453, 0.073669, 0.041946, 0.030588, 0.0068071, 0.0027179, -0.039148, -0.052938, -0.060916, 0.0017802, 0.026745, 0.038972, 0.0249, 0.017485, -0.032565, -0.029956, 0.0077032, 0.088838, 0.21809, 0.30738, 0.36105, 0.33735, 0.29875, 0.18414, 0.016301, -0.09176, -0.18105, -0.19414, -0.19652, -0.059068, -0.0008464, 0.014487, -0.016537, -0.0069108, -0.060048, -0.085586, -0.01087, 0.2996, 0.41112, 0.4843, 0.54935, 0.58946, 0.62679, 0.45765, 0.175, -0.10702, -0.272, -0.35117, -0.38423, 0.015527, 0.033186, 0.090301, 0.017405, 0.064718, -0.087909, 0.013035, 0.22977, 0.36555, 0.3662, 0.33559, 0.38549, 0.46643, 0.54012, 0.533, 0.45184, 0.10276, -0.25644, -0.38201, -0.42537, -0.0040811, 0.14625, 0.22361, 0.1179, 0.099923, -0.089093, 0.17693, 0.24392, 0.24498, 0.23815, 0.12759, 0.14724, 0.21986, 0.27242, 0.33048, 0.48618, 0.53751, 0.066453, -0.34705, -0.38858, -0.14686, 0.051023, 0.10658, 0.26441, 0.16719, 0.035699, 0.23414, 0.16112, 0.052113, -0.026435, -0.1276, -0.18274, -0.23685, -0.18043, 0.11745, 0.51972, 0.69876, 0.39307, -0.25797, -0.35202, -0.25818, -0.088538, 0.051808, 0.16638, 0.22302, 0.1513, 0.18556, 0.028097, -0.10787, -0.22551, -0.24226, -0.26771, -0.37218, -0.43578, -0.19287, 0.459, 0.69496, 0.49745, -0.15509, -0.34949, -0.27278, -0.14181, 0.083849, 0.16946, 0.20263, 0.19018, 0.089065, -0.11693, -0.25889, -0.23173, -0.22829, -0.24902, -0.36439, -0.52155, -0.40404, 0.20716, 0.60853, 0.52113, -0.14485, -0.34554, -0.22903, -0.12719, 0.1695, 0.20589, 0.15325, 0.08876, 0.056977, -0.11111, -0.27395, -0.2379, -0.21121, -0.26676, -0.4259, -0.63862, -0.5247, 0.087421, 0.50166, 0.36926, -0.26229, -0.30293, -0.15819, -0.020518, 0.21134, 0.17172, 0.10782, -0.076779, 0.013601, -0.0090243, -0.11197, -0.22571, -0.24508, -0.33367, -0.55525, -0.6924, -0.54258, 0.014743, 0.41131, 0.15189, -0.14507, -0.12447, -0.066259, 0.11858, 0.16879, 0.058446, -0.10594, -0.26667, 0.011339, 0.079964, 0.16329, 0.03347, -0.087331, -0.21325, -0.43388, -0.43502, -0.24795, 0.12979, 0.33938, 0.038261, 0.0052762, 0.16256, 0.24692, 0.25846, 0.092246, -0.10732, -0.25869, -0.3129, -0.1177, 0.097203, 0.23474, 0.22068, 0.16869, 0.11756, 0.050094, 0.043182, 0.18067, 0.23119, 0.26829, 0.18429, 0.25075, 0.34533, 0.30889, 0.22658, 0.016922, -0.21569, -0.30764, -0.27827, -0.23543, -0.03983, 0.26017, 0.34575, 0.40463, 0.44388, 0.43855, 0.45457, 0.4274, 0.3704, 0.34401, 0.31042, 0.25539, 0.25866, 0.23245, 0.11807, -0.23593, -0.32948, -0.19258, -0.16248, -0.20922, -0.15159, 0.016785, 0.23406, 0.39415, 0.50291, 0.60873, 0.67088, 0.62101, 0.50546, 0.40677, 0.27108, 0.14168, 0.065312, 0.026445, -0.14919, -0.29718, -0.15658, -0.096809, -0.073927, -0.096554, -0.092795, -0.066376, 0.0078419, 0.17415, 0.29087, 0.36335, 0.46839, 0.5266, 0.45268, 0.30837, 0.14406, -0.084578, -0.16256, -0.1175, -0.10407, -0.084134, -0.053347, -0.044193, -0.015556, -0.020185, -0.0205, -0.020961, -0.022146, -0.01508, 0.0013113, 0.0045159, 0.061004, 0.083608, 0.070442, 0.033897, -0.020403, -0.08174, -0.078804, -0.039574, -0.010873, -0.011744, -0.012397, -0.0073043, 0, -0.0015277, -0.0015277, 0, 0, 0, 0, 0, 0, 0, -0.00027053, -0.0018301, -0.006079, -0.0093572, -0.0095482, -0.0012572, 0, -0.0018301, -0.0018301, -0.0018301, 0, -0.00019096, -0.00019096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
    };

    // load mean image
    string meanFilepath = "../mean.png";
    Mat im_numMean = imread(meanFilepath, CV_LOAD_IMAGE_ANYDEPTH);
    if (!im_numMean.data) {
        cout << "Could not open " << meanFilepath << endl;
        return -1;
    }
    im_numMean.convertTo(im_numMean, CV_32F, 1.0 / 65535);


    // load templates
    vector<Mat> templates(9);
    for (int i = 0; i < 9; i++) {
        Mat t = Mat(NUMRECT_DIM, NUMRECT_DIM, CV_32F, T[i]);
        transpose(t, templates[i]);
    }


    Mat im;
    string filename = "sudoku1.jpg";
    string filepath = "../" + filename;
    im = imread(filepath, CV_LOAD_IMAGE_COLOR);

    if (!im.data) {
        cout << "Could not open " << filepath << endl;
        return -1;
    }
    namedWindow("original image", WINDOW_AUTOSIZE);
    imshow("original image", im);

    const int IM_ROWS = im.rows;
    const int IM_COLS = im.cols;
    const double IM_SQRT_RES = sqrt(IM_ROWS * IM_COLS);

    int64 A, B, C, D;
    const double TICK_FREQ_MS = getTickFrequency()*0.001f;

    C = getTickCount();

    // binarize image with adaptive thresholding

    A = getTickCount();
    
    Mat im_gray;
    cvtColor(im, im_gray, CV_RGB2GRAY);
    // mean of nxn neighborhood of pixel minus offset is used as threshold
    Mat im_bin;
    {
        int blockSize = (int)((1.0 / 16.0) * 0.5 * IM_SQRT_RES) * 2 + 1;
        cout << "adaptive thresholding blocksize " << blockSize << endl;
        int meanOffset = 12;
        adaptiveThreshold(im_gray, im_bin, 255, ADAPTIVE_THRESH_MEAN_C,
            THRESH_BINARY_INV, blockSize, meanOffset);
    }
    B = getTickCount();
    cout << "binarize: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;

    namedWindow("thesholded image", WINDOW_AUTOSIZE);
    imshow("thesholded image", im_bin);



    // remove everything except the largest blob, assumed to be the sudoku grid
    A = getTickCount();
    Mat im_binblob;
    im_bin.copyTo(im_binblob);
    {
        int maxArea = 0;
        Point maxAreaPoint;
        for (int y = 0; y < IM_ROWS; y++) {
            uchar *row = im_binblob.ptr(y);
            for (int x = 0; x < IM_COLS; x++) {
                if (row[x] > 128) {
                    int area = floodFill(im_binblob, Point(x, y), Scalar(128));
                    if (area > maxArea) {
                        maxArea = area;
                        maxAreaPoint = Point(x, y);
                    }
                }
            }
        }
        floodFill(im_binblob, maxAreaPoint, Scalar(255));
        threshold(im_binblob, im_binblob, 254, 255, CV_THRESH_BINARY);
    }
    /*{
        vector<vector<Point>> contours;
        findContours(im_binblob, contours, CV_RETR_LIST, CV_CHAIN_APPROX_NONE);
        
        // find largest blob
        int maxArea = 0;
        int maxIndex = -1;
        for (int i = 0; i < contours.size(); i++) {
            int area = contours[i].size();
            if (area > maxArea) {
                maxArea = area;
                maxIndex = i;
            }
        }

        im_binblob = Mat::zeros(im_binblob.size(), im_binblob.type());
        drawContours(im_binblob, contours, maxIndex, Scalar(255));
    }*/
    B = getTickCount();
    cout << "find max blob: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;

    //namedWindow("max blob", WINDOW_AUTOSIZE);
    //imshow("max blob", im_binblob);


    
    
    // find the contour of the grid
    A = getTickCount();
    Mat im_edge = Mat::zeros(IM_ROWS, IM_COLS, CV_8U);
    for (int y = 1; y < IM_ROWS - 1; y++) {
        uchar* row_above = im_binblob.ptr(y - 1);
        uchar* row = im_binblob.ptr(y);
        uchar* row_below = im_binblob.ptr(y + 1);
        uchar* edge_row = im_edge.ptr(y);
        for (int x = 1; x < IM_COLS - 1; x++) {
            uchar center = row[x];
            if (!center) {
                edge_row[x] = 0;
                continue;
            }
            uchar top = row_above[x];
            uchar bottom = row_below[x];
            uchar left = row[x - 1];
            uchar right = row[x + 1];
            if (top && bottom && left && right) {
                edge_row[x] = 0;
            } else {
                edge_row[x] = 255;
            }
        }
    }

    B = getTickCount();
    cout << "manual contour: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;

    //namedWindow("manual contour", CV_WINDOW_AUTOSIZE);
    //imshow("manual contour", im_edge);

    // find the four corners of the grid
    A = getTickCount();
    vector<Point2f> corners(4);
    {
        // corners are, in order:
        // min projection onto <1,1>  (top left)    minSum
        // max projection onto <1,-1> (top right)   maxDiff
        // max projection onto <1,1> (bottom right) maxSum
        // min projection onto <1,-1> (bottom left) minDiff
        int largeEnough = IM_COLS + IM_ROWS;
        int maxSum = -largeEnough, minSum = largeEnough;
        int maxDiff = -largeEnough, minDiff = largeEnough;
        for (int y = 0; y < IM_ROWS; y++) {
            uchar *row = im_edge.ptr(y);
            for (int x = 0; x < IM_COLS; x++) {
                if (row[x]) {
                    int sum = x + y;    // projection onto <1,1>
                    int diff = x - y;   // projection onto <1,-1>
                    if (sum < minSum) {
                        minSum = sum;
                        corners[0] = Point2f(x, y);
                    }
                    if (sum > maxSum) {
                        maxSum = sum;
                        corners[2] = Point2f(x, y);
                    }
                    if (diff < minDiff) {
                        minDiff = diff;
                        corners[3] = Point2f(x, y);
                    }
                    if (diff > maxDiff) {
                        maxDiff = diff;
                        corners[1] = Point2f(x, y);
                    }
                }
            }
        }
    }
    B = getTickCount();
    cout << "find 4 corners: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;
    
    
    // draw corners
    Mat im_corners;
    im.copyTo(im_corners);
    for (int i = 0; i < 4; i++) {
        circle(im_corners, corners[i], 5, Scalar(255,0,0), 2, 8, 0);
    }
    //namedWindow("4 corners", CV_WINDOW_AUTOSIZE);
    //imshow("4 corners", im_corners);




    // find homography and straighten grid
    A = getTickCount();
    const int CELL_DIM = 51;    // make this odd
    const int GRID_DIM = 9 * CELL_DIM;
    const int GRID_PAD = 30;
    const int GRID_DIM_PAD = GRID_DIM + 2 * GRID_PAD;
    Mat im_grid;
    {
        vector<Point2f> dstPoints;
        dstPoints.push_back(Point2f(GRID_PAD, GRID_PAD));
        dstPoints.push_back(Point2f(GRID_PAD + GRID_DIM, GRID_PAD));
        dstPoints.push_back(Point2f(GRID_PAD + GRID_DIM, GRID_PAD + GRID_DIM));
        dstPoints.push_back(Point2f(GRID_PAD, GRID_PAD + GRID_DIM));
        Mat transform = findHomography(corners, dstPoints, 0);
        warpPerspective(im_bin, im_grid, transform, Size(GRID_DIM_PAD, GRID_DIM_PAD),
            INTER_NEAREST, BORDER_CONSTANT, Scalar(0));
    }
    B = getTickCount();
    cout << "homography transform: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;
    
    namedWindow("grid", CV_WINDOW_AUTOSIZE);
    imshow("grid", im_grid); 


    // find best center of each grid cell with two-bar template matching

    vector<Point2i> cellCenters(81);
    Mat im_grid_thick;

    A = getTickCount();
    {
        // dilate image for thicker lines
        {
            int SE_radius = 1;
            int SE_size = SE_radius * 2 + 1;
            cout << "dilate SE size " << SE_size << endl;
            Mat dilate_SE = Mat::zeros(SE_size, SE_size, CV_8U);
            for (int y = 0; y < SE_size; y++)
                dilate_SE.ptr(y)[SE_radius] = 1;
            uchar* row = dilate_SE.ptr(SE_radius);
            for (int x = 0; x < SE_size; x++)
                row[x] = 1;
            dilate(im_grid, im_grid_thick, dilate_SE);
        }

        const int CELL_HALF_DIM = (CELL_DIM - 1) / 2;
        const int BAR_HALF_THICKNESS = 2;
        const int BAR_THICKNESS = 2 * BAR_HALF_THICKNESS;
        const int ACCEPT_WIDTH = 15;

        // bounds for horizontal bars
        Point2i hor_r1_min;
        hor_r1_min.x = -CELL_HALF_DIM;
        hor_r1_min.y = -CELL_HALF_DIM - BAR_HALF_THICKNESS;
        Point2i hor_r1_max;
        hor_r1_max.x = hor_r1_min.x + CELL_DIM;
        hor_r1_max.y = hor_r1_min.y + BAR_THICKNESS;
        Point2i hor_s1_min(hor_r1_min.x + ACCEPT_WIDTH, hor_r1_min.y);
        Point2i hor_s1_max(hor_r1_max.x - ACCEPT_WIDTH, hor_r1_max.y);

        Point2i hor_r2_min = hor_r1_min + Point2i(0, CELL_DIM);
        Point2i hor_r2_max = hor_r1_max + Point2i(0, CELL_DIM);
        Point2i hor_s2_min = hor_s1_min + Point2i(0, CELL_DIM);
        Point2i hor_s2_max = hor_s1_max + Point2i(0, CELL_DIM);
        // bounds for vertical bars (simply the transpose of horizontal bar bounds)
        Point2i vert_r1_min(hor_r1_min.y, hor_r1_min.x);
        Point2i vert_r1_max(hor_r1_max.y, hor_r1_max.x);
        Point2i vert_r2_min(hor_r2_min.y, hor_r2_min.x);
        Point2i vert_r2_max(hor_r2_max.y, hor_r2_max.x);
        Point2i vert_s1_min(hor_s1_min.y, hor_s1_min.x);
        Point2i vert_s1_max(hor_s1_max.y, hor_s1_max.x);
        Point2i vert_s2_min(hor_s2_min.y, hor_s2_min.x);
        Point2i vert_s2_max(hor_s2_max.y, hor_s2_max.x);

        // calculate integral image
        Mat im_grid_integral;
        integral(im_grid_thick, im_grid_integral, CV_32S);

        const int SEARCH_RADIUS = 15;   // from ideal center
        for (int i = 0; i < 9; i++) {
            // find ideal center of cell in row i, col j
            float ideal_center_y = round((i + 0.5) / 9 * GRID_DIM) + GRID_PAD;
            for (int j = 0; j < 9; j++) {
                // find ideal center of cell in row i, col j
                float ideal_center_x = round((j + 0.5) / 9 * GRID_DIM) + GRID_PAD;

                /*
                // search left to right with template of two vertical bars
                Point2i LR_best = twoRectsMatch(im_grid_integral,
                    vert_r1_min, vert_r1_max, vert_r2_min, vert_r2_max,
                    Point2i(ideal_center_x - SEARCH_RADIUS, ideal_center_y),
                    Point2i(ideal_center_x + SEARCH_RADIUS + 1, ideal_center_y + 1)
                    );

                // search top to bottom with template of two horizontal bars
                Point2i LRTB_best = twoRectsMatch(im_grid_integral,
                    hor_r1_min, hor_r1_max, hor_r2_min, hor_r2_max,
                    Point2i(LR_best.x, ideal_center_y - SEARCH_RADIUS),
                    Point2i(LR_best.x + 1, ideal_center_y + SEARCH_RADIUS + 1)
                    );
                */

                // search top to bottom with template of two horizontal bars
                Point2i TB_best = twoRectsMatch(im_grid_integral,
                    hor_r1_min, hor_r1_max, hor_r2_min, hor_r2_max,
                    hor_s1_min, hor_s1_max, hor_s2_min, hor_s2_max,
                    Point2i(ideal_center_x, ideal_center_y - SEARCH_RADIUS),
                    Point2i(ideal_center_x + 1, ideal_center_y + SEARCH_RADIUS + 1)
                    );
                // search left to right with template of two vertical bars
                Point2i LRTB_best = twoRectsMatch(im_grid_integral,
                    vert_r1_min, vert_r1_max, vert_r2_min, vert_r2_max,
                    vert_s1_min, vert_s1_max, vert_s2_min, vert_s2_max,
                    Point2i(ideal_center_x - SEARCH_RADIUS, TB_best.y),
                    Point2i(ideal_center_x + SEARCH_RADIUS + 1, TB_best.y + 1)
                    );
                // search top to bottom again with template of two horizontal bars
                Point2i LRTB_best2 = twoRectsMatch(im_grid_integral,
                    hor_r1_min, hor_r1_max, hor_r2_min, hor_r2_max,
                    hor_s1_min, hor_s1_max, hor_s2_min, hor_s2_max,
                    Point2i(LRTB_best.x, LRTB_best.y - SEARCH_RADIUS),
                    Point2i(LRTB_best.x + 1, LRTB_best.y + SEARCH_RADIUS + 1)
                    );
                cellCenters[9 * i + j] = LRTB_best2;
            }
        }
    }
    B = getTickCount();
    cout << "cell centers: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;


    // draw centers
    Mat im_cell_centers;
    cvtColor(im_grid, im_cell_centers, CV_GRAY2RGB);
    for (int i = 0; i < cellCenters.size(); i++) {
        circle(im_cell_centers, cellCenters[i], 3, Scalar(0, 255, 0), 2, 8, 0);
    }
    namedWindow("cell centers", CV_WINDOW_AUTOSIZE);
    imshow("cell centers", im_cell_centers);




    // extract numbers from grid
    vector<Mat> numbers_bin(cellCenters.size());

    A = getTickCount();
    {
        const int CELLRECT_HALF_DIM = 20;
        const int CELLRECT_DIM = 2 * CELLRECT_HALF_DIM + 1;
        const int CELLRECT_PIXELS = CELLRECT_DIM * CELLRECT_DIM;

        Point2i cellRectMin(-CELLRECT_HALF_DIM, -CELLRECT_HALF_DIM);
        Point2i cellRectMax(CELLRECT_HALF_DIM + 1, CELLRECT_HALF_DIM + 1);
        Rect cellRect(cellRectMin, cellRectMax);
        for (int i = 0; i < cellCenters.size(); i++) {

            // crop out a square around the cell center to get the number
            Mat im_num = im_grid(cellRect + cellCenters[i]);

            // if square has too few white pixels, it's assumed blank
            if (countNonZero(im_num) < CELLRECT_PIXELS / 16) {
                continue;
            }

            // morphological close ????

            // find bounds of largest blob in the square
            int maxArea = 0;
            Point maxBlobPoint;
            for (int y = 0; y < CELLRECT_DIM; y++) {
                uchar *row = im_num.ptr(y);
                for (int x = 0; x < CELLRECT_DIM; x++) {
                    if (row[x] > 128) {
                        int area = floodFill(im_num, Point(x, y), Scalar(128));
                        if (area > maxArea) {
                            maxArea = area;
                            maxBlobPoint = Point(x, y);
                        }
                    }
                }
            }
            Rect blobRect;
            floodFill(im_num, maxBlobPoint, Scalar(255), &blobRect);
            threshold(im_num, im_num, 254, 255, CV_THRESH_BINARY);

            // extract largest blob square bounding box and scale to a fixed size
            int widthDiff = CELLRECT_DIM - blobRect.height;
            Point2i topLeft(widthDiff / 2, blobRect.tl().y);
            Point2i bottomRight(topLeft.x + blobRect.height, blobRect.br().y);

            Mat im_num_cropped_scaled;
            resize(im_num(Rect(topLeft, bottomRight)), im_num_cropped_scaled, Size(NUMRECT_DIM, NUMRECT_DIM),
                0.0, 0.0, INTER_LINEAR);

            numbers_bin[i] = im_num_cropped_scaled;

            // FOR TESTING
            stringstream ss;
            ss << "../out/" << filename << "_" << (i / 9) << "_" << (i % 9) << ".png";
            imwrite(ss.str(), im_num_cropped_scaled);
        }

    }
    B = getTickCount();
    cout << "digit cropping: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;
    
    //namedWindow("cell", CV_WINDOW_AUTOSIZE);
    //imshow("cell", numbers_bin[36]);



    // match extracted numbers to templates
    int values[9][9];
    const double MAX_MSE = 400.0;
    for (int i = 0; i < numbers_bin.size(); i++) {
        Mat& number = numbers_bin[i];
        if (!number.data) {
            values[i / 9][i % 9] = 0;
            continue;
        }

        // subtract training avg from this number image
        number.convertTo(number, CV_32F, 1/255.0);
        Mat numberSubMean = number - im_numMean;

        // calculate square error with each template; record lowest
        float minMse = 100000000000.0;
        int minIndex = -1;
        for (int j = 0; j < 9; j++) {
            Mat& numTemplate = templates[j];
            Mat diff = numberSubMean - numTemplate;
            Mat diffSq;
            multiply(diff, diff, diffSq, 1.0);
            float mse = sum(diffSq)[0];
            if (mse < minMse) {
                minMse = mse;
                minIndex = j;
            }
        }

        if (minMse > MAX_MSE) {
            values[i / 9][i % 9] = 0;
        } else {
            values[i / 9][i % 9] = minIndex + 1;
        }
    }

    // print out recognized digit values
    printf("\n");
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (values[i][j])
                printf(" %d", values[i][j]);
            else
                printf(" -");
        }
        printf("\n");
    }

    

    D = getTickCount();
    cout << endl << "TOTAL: " << ((D - C) / TICK_FREQ_MS) << " ms" << endl;

    waitKey();

    return 0;
}
//}



int getRectSum(const Mat& integral, const Point2i& min, const Point2i& max) {
    const int* min_row = integral.ptr<int>(min.y);
    const int* max_row = integral.ptr<int>(max.y);
    return (max_row[max.x] - max_row[min.x] - min_row[max.x] + min_row[min.x]);
}

// [r1_min, r1_max) are bounds of first rect relative to the center of this template
// [r2_min, r2_max) are bounds of the second rect
// [s1_min, s1_max), [s1_min, s1_max) are bounds of rects to whose sum is subtracted
// instead of added
// [center_min, center_max) are the bounds of the rect in which the center can
// move around to find a max match.
// centers that gave the max template sum value are recorded

Point2i twoRectsMatch(const Mat& integral,
    const Point2i& r1_min, const Point2i& r1_max,
    const Point2i& r2_min, const Point2i& r2_max,
    const Point2i& s1_min, const Point2i& s1_max,
    const Point2i& s2_min, const Point2i& s2_max,
    const Point2i& center_min, const Point2i& center_max) {

    int maxResponse = -2000000000;
    Point2i maxMatchesSum(0);
    int numMaxMatches = 0;
    for (int x = center_min.x; x < center_max.x; x++) {
        for (int y = center_min.y; y < center_max.y; y++) {
            
            Point2i center(x, y);
            
            int r1_sum = getRectSum(integral, center + r1_min, center + r1_max);
            int r2_sum = getRectSum(integral, center + r2_min, center + r2_max);
            int s1_sum = getRectSum(integral, center + s1_min, center + s1_max);
            int s2_sum = getRectSum(integral, center + s2_min, center + s2_max);

            int response = min(r1_sum - s1_sum, r2_sum - s2_sum);

            if (response > maxResponse) {
                maxResponse = response;
                maxMatchesSum = center;
                numMaxMatches = 1;
            } else if (response == maxResponse) {
                maxMatchesSum += center;
                numMaxMatches++;
            }
        }
    }
    return maxMatchesSum * (1.0 / numMaxMatches);
}


