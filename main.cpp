#define TESTING 1

#if TESTING == 0
#include <jni.h>
#endif
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2\calib3d\calib3d.hpp>
#include <iostream>
#include <fstream>

using namespace std;
using namespace cv;


Point2i twoRectsMatch(const Mat& integral,
    const Point2i& r1_min, const Point2i& r1_max,
    const Point2i& r2_min, const Point2i& r2_max,
    const Point2i& s1_min, const Point2i& s1_max,
    const Point2i& s2_min, const Point2i& s2_max,
    const Point2i& center_min, const Point2i& center_max);


#if TESTING == 0
extern "C" {
JNIEXPORT void JNICALL Java_org_opencv_samples_tutorial2_Tuturial2Activity_FindFeatures(JNIEnv*, jobject, jlong addrIm, jlong addrImOut);

JNIEXPORT void JNICALL Java_org_opencv_samples_tutorial2_Tutorial2Activity_FindFeatures(JNIEnv*, jobject, jlong addrIm, jlong addrImOut)
{

#else
int main(void)
{
{

#endif

#if TESTING == 0
    Mat& im = *(Mat*)addrIm;
    Mat& im_output = *(Mat*)addrImOut;
#else
    Mat im;
    Mat im_output;
#endif

    Mat im_orig = im;

    const int NUMRECT_DIM = 20;
    const int NUMRECT_PIX = NUMRECT_DIM * NUMRECT_DIM;


    const int FONT_FACE = FONT_HERSHEY_SIMPLEX;
    const double FONT_SCALE = 1.2;
    const int FONT_THICKNESS = 2;

    // PREPROCESS ========================================================================================

    
    // templates for number recognition
    vector<Mat> templates(9);

    float T[9][400] = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0043287, -0.0055228, -0.0038944, -0.00043422, -0.0024425, -0.0043287, -0.0035416, -0.0034602, -0.0034602, -0.0021575, -0.00099057, -0.0077889, -0.022362, -0.028808, -0.028713, -0.0157, -0.0062691, -0.00032567, -0.00012212, 0, -0.011029, -0.029864, -0.042384, -0.067562, -0.10511, -0.13134, -0.13012, -0.097985, -0.096927, -0.090427, -0.094633, -0.1388, -0.20486, -0.24654, -0.29047, -0.21478, -0.13814, -0.081542, -0.062125, -0.038962, -0.05916, -0.093218, -0.20059, -0.326, -0.41873, -0.46013, -0.41361, -0.32789, -0.27451, -0.28257, -0.33633, -0.31036, -0.32644, -0.3883, -0.50291, -0.4795, -0.44476, -0.31278, -0.16635, -0.056761, -0.12496, -0.27861, -0.50918, -0.55974, -0.51921, -0.52024, -0.53634, -0.44838, -0.42474, -0.4422, -0.48754, -0.39889, -0.35567, -0.41456, -0.55386, -0.57334, -0.56469, -0.51289, -0.31195, -0.091061, -0.23731, -0.49279, -0.44216, -0.31067, -0.17642, -0.049736, -0.17635, -0.39329, -0.51496, -0.51482, -0.48238, -0.39361, -0.35359, -0.38608, -0.48014, -0.55143, -0.5594, -0.53041, -0.44695, -0.18219, -0.35868, -0.49311, -0.39372, -0.085281, 0.26203, 0.29566, 0.020594, -0.36685, -0.48703, -0.46939, -0.38283, -0.28607, -0.31693, -0.33419, -0.3524, -0.35427, -0.43869, -0.51801, -0.49913, -0.30024, -0.47941, -0.46919, -0.28497, 0.31001, 0.65667, 0.60065, 0.26273, -0.14743, -0.26244, -0.21646, -0.14439, -0.088115, -0.14243, -0.14512, -0.13764, -0.070698, -0.13248, -0.34452, -0.47147, -0.40899, -0.46204, -0.45665, -0.11226, 0.55162, 0.74335, 0.70168, 0.29571, -0.0045299, -0.1944, -0.14171, -0.070006, -0.020114, -0.041434, -0.03598, 0.031053, 0.14979, 0.12241, -0.15526, -0.33724, -0.348, -0.33629, -0.29111, 0.096365, 0.55665, 0.77142, 0.69945, 0.4287, 0.25861, 0.029887, 0.052338, 0.15831, 0.2336, 0.25305, 0.31023, 0.36385, 0.46374, 0.36105, 0.056119, -0.086125, -0.10691, -0.078209, -0.060857, 0.079011, 0.45685, 0.6597, 0.65132, 0.55697, 0.32852, 0.182, 0.17103, 0.25266, 0.39007, 0.50685, 0.63547, 0.67436, 0.64576, 0.49397, 0.19844, 0.12388, 0.16692, -0.045152, -0.26879, -0.24356, -0.031484, 0.16027, 0.22576, 0.1693, -0.046388, -0.13585, -0.16704, -0.1071, 0.072197, 0.28684, 0.37189, 0.34414, 0.25812, 0.10715, 0.018095, 0.085678, 0.34249, -0.0021253, -0.30473, -0.40323, -0.35158, -0.23195, -0.1043, -0.071783, -0.15724, -0.20643, -0.24339, -0.29602, -0.24011, -0.14416, -0.13551, -0.11179, -0.14421, -0.18577, -0.10744, 0.039224, 0.30728, -0.24188, -0.4808, -0.63531, -0.62455, -0.58506, -0.51283, -0.4522, -0.41515, -0.45094, -0.53281, -0.56195, -0.56128, -0.59586, -0.61207, -0.60053, -0.5702, -0.54052, -0.39942, -0.14492, -0.0092764, -0.14298, -0.20247, -0.31872, -0.41413, -0.42152, -0.37205, -0.34025, -0.27797, -0.22527, -0.2738, -0.39247, -0.4845, -0.5799, -0.64611, -0.6277, -0.49233, -0.36527, -0.19639, -0.032721, 0.013388, -0.045715, -0.064116, -0.071362, -0.090752, -0.11701, -0.11109, -0.11667, -0.09561, -0.072841, -0.080318, -0.13137, -0.1979, -0.294, -0.37173, -0.35295, -0.20242, -0.10579, -0.047581, -0.018072, -0.0018833, 0, -0.0020761, -0.0034602, -0.00094986, -0.0011263, -0.00086844, -8.1417e-05, 0, -0.0034602, -0.0034602, -0.0034602, -0.0034602, -0.010394, -0.030111, -0.03163, -0.009078, -8.1417e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0043287, -0.0055228, -0.0038944, -0.00043422, -0.0024425, -0.0043287, -0.0035416, -0.0034602, -0.0034602, -0.0021575, -0.00099057, -0.0077889, -0.022362, -0.028808, -0.028713, -0.0157, -0.0062691, -0.00032567, -0.00012212, 0, -0.045241, -0.052311, -0.02494, 0.057928, 0.088535, 0.079479, 0.05041, -0.034023, -0.096927, -0.090427, -0.094633, -0.1388, -0.20486, -0.24654, -0.25598, -0.092668, 0.07471, 0.24882, 0.39981, 0.31222, -0.087423, -0.045212, 0.12747, 0.17745, 0.20021, 0.21249, 0.089568, -0.13411, -0.27343, -0.28257, -0.33633, -0.31036, -0.32644, -0.3714, -0.3186, 0.0069064, 0.25734, 0.48046, 0.67043, 0.5427, -0.14416, 0.05134, 0.25188, 0.29219, 0.1983, 0.15224, 0.062033, -0.22526, -0.42217, -0.4422, -0.48754, -0.39808, -0.33904, -0.21334, 0.023689, 0.2126, 0.34579, 0.38596, 0.57771, 0.59359, -0.025548, 0.19673, 0.24534, 0.24876, 0.11729, 0.0074651, -0.1608, -0.36205, -0.51496, -0.51482, -0.48238, -0.37887, -0.0922, 0.1931, 0.368, 0.39177, 0.34499, 0.25837, 0.31776, 0.40375, 0.11015, 0.234, 0.23616, 0.1895, 0.0028, -0.22888, -0.29327, -0.42662, -0.48703, -0.46939, -0.35863, -0.14003, 0.27536, 0.50232, 0.50643, 0.41557, 0.28112, 0.22953, 0.23623, 0.26974, 0.12587, 0.20762, 0.21672, 0.00061343, -0.18078, -0.25358, -0.28196, -0.38245, -0.4807, -0.43471, -0.24175, 0.17612, 0.46176, 0.54453, 0.48819, 0.3408, 0.20897, 0.25818, 0.22238, 0.099595, 0.16988, 0.17486, 0.095851, -0.15534, -0.23501, -0.23719, -0.23519, -0.34503, -0.52408, -0.38133, -0.042961, 0.45453, 0.57087, 0.54725, 0.22673, 0.02187, 0.11416, 0.33574, 0.24423, 0.1138, 0.16189, 0.12417, 0.028617, -0.11245, -0.19734, -0.19832, -0.25149, -0.33044, -0.50967, -0.31507, 0.16886, 0.5146, 0.54554, 0.34322, -0.054405, -0.16696, 0.071936, 0.3071, 0.24802, 0.21967, 0.074191, 0.033937, 0.0012559, -0.014007, -0.087831, -0.15531, -0.22234, -0.4393, -0.5105, -0.10092, 0.25334, 0.43753, 0.44113, -0.0554, -0.26574, -0.26958, -0.13902, 0.13827, 0.14674, 0.18842, -0.1106, 0.018298, 0.051233, 0.0050272, 0.0085417, -0.16572, -0.25261, -0.35971, -0.14045, 0.10287, 0.17972, 0.28815, 0.022336, -0.29816, -0.34146, -0.42748, -0.33234, 0.074349, 0.16046, 0.23431, -0.16886, -0.0099352, 0.083995, 0.16525, 0.093403, 0.017809, -0.024724, 0.13674, 0.18221, 0.18108, 0.091941, -0.2558, -0.55795, -0.58392, -0.5986, -0.66361, -0.43675, 0.085531, 0.2848, 0.39301, -0.19847, 0.071604, 0.15319, 0.27876, 0.32636, 0.39684, 0.45801, 0.48614, 0.43547, 0.24244, -0.15884, -0.54911, -0.67511, -0.69131, -0.67977, -0.64945, -0.31591, 0.31039, 0.61464, 0.62534, -0.14082, -0.090232, 0.16918, 0.37059, 0.46462, 0.54033, 0.56414, 0.52649, 0.41584, 0.14499, -0.27672, -0.4845, -0.5799, -0.64611, -0.6277, -0.49233, -0.074806, 0.57061, 0.75781, 0.64084, -0.045715, -0.064116, -0.0052359, 0.1083, 0.32112, 0.34192, 0.35446, 0.29208, 0.11688, -0.047728, -0.12961, -0.1979, -0.294, -0.37173, -0.35295, -0.20242, 0.076363, 0.34782, 0.41641, 0.29156, 0, -0.0020761, -0.0034602, -0.00094986, -0.0011263, -0.00086844, -8.1417e-05, 0, -0.0034602, -0.0034602, -0.0034602, -0.0034602, -0.010394, -0.030111, -0.03163, -0.009078, -8.1417e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0043287, -0.0055228, -0.0038944, -0.00043422, 0.014628, 0.0030531, -0.0028496, -0.0034602, -0.0034602, -0.0021575, -0.00099057, -0.0077889, -0.022362, -0.019235, 0.030111, 0.036549, 0.029832, -0.00032567, -0.00012212, 0, -0.042052, -0.051659, -0.037587, 0.048009, 0.11877, 0.074428, -0.04119, -0.094294, -0.096927, -0.090427, -0.094633, -0.1388, -0.20451, -0.0072122, 0.16709, 0.18984, 0.17905, 0.073241, 0.0019404, -0.030029, -0.060214, -0.0035348, 0.13, 0.239, 0.25625, 0.1664, -0.05248, -0.30805, -0.27416, -0.28257, -0.33633, -0.31036, -0.3239, -0.049664, 0.19271, 0.2017, 0.2765, 0.17258, 0.096628, -0.033578, -0.044216, 0.0981, 0.20969, 0.24973, 0.19273, 0.086112, -0.14782, -0.4478, -0.42451, -0.4422, -0.48754, -0.39889, -0.35567, -0.18215, 0.10807, 0.16438, 0.22297, 0.33856, 0.20631, 0.043565, -0.027505, 0.19108, 0.22607, 0.17336, 0.061571, -0.074116, -0.30852, -0.4692, -0.47944, -0.47653, -0.48238, -0.39361, -0.35359, -0.2968, -0.13043, -0.00056992, 0.10451, 0.23842, 0.24797, 0.067298, 0.10915, 0.18138, 0.16807, 0.03929, -0.096078, -0.19488, -0.33162, -0.43215, -0.38081, -0.2619, -0.2826, -0.28607, -0.31693, -0.32911, -0.29738, -0.14977, -0.039134, 0.18093, 0.20936, 0.1333, 0.21992, 0.20991, 0.10695, -0.11634, -0.19758, -0.24213, -0.28196, -0.3527, -0.1461, 0.29793, 0.012097, -0.28676, -0.36069, -0.3646, -0.34237, -0.24063, -0.093968, 0.11854, 0.21303, 0.22858, 0.25998, 0.19007, 0.055207, -0.183, -0.23328, -0.23719, -0.23519, -0.27986, 0.17892, 0.50495, 0.24504, -0.2528, -0.38785, -0.38311, -0.31607, -0.19896, -0.09542, 0.087218, 0.23915, 0.32063, 0.16453, 0.11472, 0.035016, -0.16729, -0.19951, -0.17967, -0.26245, -0.26707, 0.22107, 0.41718, 0.25586, -0.27014, -0.41263, -0.35928, -0.27536, -0.18657, -0.09903, 0.09825, 0.24652, 0.26513, 0.048192, 0.019058, 0.021413, -0.029717, -0.20057, -0.24675, -0.27703, -0.1788, 0.15724, 0.21687, 0.20532, -0.24447, -0.36864, -0.29723, -0.24326, -0.2028, -0.14702, 0.13472, 0.16946, 0.072698, -0.1189, -0.014085, 0.061395, 0.14256, 0.10236, 0.031535, 0.06573, 0.12259, 0.15931, 0.1416, 0.17594, -0.014546, -0.13093, -0.21035, -0.23685, -0.15008, -0.046021, 0.14169, 0.12574, -0.03851, -0.33351, -0.12203, 0.04351, 0.17387, 0.17203, 0.17445, 0.2449, 0.21194, 0.023502, 0.071084, 0.17809, 0.20712, 0.19831, 0.11193, 0.062182, 0.13604, 0.17087, 0.16106, 0.10198, -0.082977, -0.27283, -0.1234, 0.058091, 0.20797, 0.30409, 0.35591, 0.36244, 0.26247, 0.048015, 0.026657, 0.24623, 0.35856, 0.32489, 0.29704, 0.28874, 0.34582, 0.3254, 0.27499, 0.061707, -0.073879, -0.14183, -0.15068, 0.023842, 0.19199, 0.24019, 0.31861, 0.27543, 0.11084, -0.10485, -0.19399, 0.12518, 0.36591, 0.33325, 0.31929, 0.3377, 0.39118, 0.33915, 0.17104, -0.038938, -0.083947, -0.045715, -0.061809, -0.018767, 0.061497, 0.098792, 0.12155, 0.088405, 0.011887, -0.04712, -0.070514, 0.0058891, 0.082957, 0.10889, 0.11881, 0.12755, 0.24707, 0.19998, 0.056985, -0.037099, -0.036366, 0, -0.0020761, -0.0034602, -0.00025782, 0.0062555, 0.0065133, 0.00061062, 0, -0.0034602, -0.0034602, -0.0034602, -0.0034602, 0.019018, -0.00069883, 0.027193, -0.0016962, 0.00061062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0043287, -0.0055228, -0.0038944, -0.00043422, -0.0024425, -0.0043287, -0.0035416, -0.0034602, -0.0034602, -0.0021575, 0.0063498, 0.049929, 0.14335, 0.17632, 0.13278, 0.052978, 0.0063, -0.00032567, -0.00012212, 0, -0.045512, -0.064346, -0.063885, -0.067562, -0.10511, -0.13134, -0.13012, -0.097382, -0.0921, -0.065087, 0.055593, 0.3338, 0.6238, 0.67352, 0.53155, 0.02293, -0.13432, -0.082353, -0.063342, -0.040179, -0.0977, -0.16651, -0.27969, -0.34439, -0.41873, -0.46013, -0.41361, -0.30476, -0.1827, -0.034908, 0.31676, 0.55178, 0.63927, 0.60928, 0.41765, -0.1517, -0.43786, -0.34023, -0.20949, -0.099898, -0.16728, -0.38206, -0.60992, -0.63101, -0.58628, -0.56577, -0.48958, -0.30397, -0.0026154, 0.29636, 0.48059, 0.54983, 0.5655, 0.57368, 0.39737, -0.18761, -0.56911, -0.59673, -0.42229, -0.196, -0.27964, -0.6268, -0.75466, -0.68984, -0.57785, -0.45856, -0.18639, 0.11438, 0.34145, 0.44073, 0.37031, 0.22942, 0.37632, 0.59864, 0.45943, -0.1454, -0.59809, -0.72432, -0.68224, -0.38841, -0.44022, -0.74423, -0.75355, -0.47632, -0.14346, 0.15791, 0.37248, 0.51637, 0.41231, 0.27912, -0.049702, -0.13202, 0.17719, 0.62338, 0.59592, 0.04412, -0.47737, -0.71192, -0.76377, -0.56393, -0.611, -0.76133, -0.5628, -0.084649, 0.37474, 0.58337, 0.67239, 0.4816, 0.10321, -0.24054, -0.32313, -0.27369, 0.11473, 0.59046, 0.62425, 0.16221, -0.33059, -0.62552, -0.77762, -0.69391, -0.64839, -0.5229, -0.27024, 0.2809, 0.6761, 0.69503, 0.49473, 0.061908, -0.35304, -0.4481, -0.39982, -0.3136, 0.089403, 0.57335, 0.65054, 0.19119, -0.24492, -0.54625, -0.72552, -0.67349, -0.45633, -0.35637, -0.012815, 0.52898, 0.63196, 0.43883, 0.13715, -0.20698, -0.4625, -0.44587, -0.37859, -0.26815, 0.15984, 0.6186, 0.69759, 0.28302, -0.12963, -0.43905, -0.57793, -0.57084, -0.21016, -0.063901, 0.10337, 0.43683, 0.6072, 0.474, 0.32354, 0.1224, -0.05302, -0.084591, 0.0052068, 0.18504, 0.41736, 0.67298, 0.71292, 0.55565, 0.30203, -0.020651, -0.099021, -0.0773, 0.24768, 0.051328, 0.077197, 0.28927, 0.48102, 0.52934, 0.47288, 0.2572, 0.16743, 0.14495, 0.18148, 0.36077, 0.57541, 0.67074, 0.65854, 0.57252, 0.36678, 0.16914, 0.16046, 0.40548, 0.4071, 0.15922, 0.083995, 0.15273, 0.2486, 0.33316, 0.33016, 0.21587, 0.16411, 0.17059, 0.15015, 0.25371, 0.37836, 0.41608, 0.4014, 0.33639, 0.25899, 0.16112, 0.26559, 0.51371, 0.17514, 0.038585, -0.12474, -0.16865, -0.10644, -0.021739, 0.02079, 0.033615, 0.023259, -0.032944, -0.10585, -0.083656, 0.16532, 0.30437, 0.31309, 0.14311, -0.049611, -0.099944, 0.099116, 0.16898, -0.079934, -0.12545, -0.25145, -0.3544, -0.36199, -0.31252, -0.27127, -0.20788, -0.15619, -0.21428, -0.33294, -0.37369, -0.045464, 0.33398, 0.34154, -0.084383, -0.30436, -0.23145, -0.10379, -0.057682, -0.045715, -0.064116, -0.071362, -0.090752, -0.11701, -0.11109, -0.11667, -0.09561, -0.072841, -0.080318, -0.13137, -0.16562, 0.028076, 0.47341, 0.52839, 0.037203, -0.10066, -0.069082, -0.052554, -0.036366, 0, -0.0020761, -0.0034602, -0.00094986, -0.0011263, -0.00086844, -8.1417e-05, 0, -0.0034602, -0.0034602, -0.0034602, -0.0034602, 0.040988, 0.16738, 0.15148, 0.051757, -8.1417e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0043287, -0.0055228, -0.0038944, -0.00043422, -0.0024425, -0.0043287, -0.0035416, -0.0034602, -0.0034602, -0.0021575, -0.00099057, -0.0077889, -0.022362, -0.028808, -0.028713, -0.0157, -0.0062691, -0.00032567, -0.00012212, 0, -0.043306, -0.06214, -0.061679, -0.065356, -0.10033, -0.12472, -0.087593, -0.042838, -0.0066079, 0.0056517, 0.0076951, -0.12275, -0.20486, -0.21309, -0.017428, 0.20838, 0.18637, 0.051961, -0.017999, -0.0089291, -0.037038, -0.025824, -0.11339, -0.11976, -0.070319, -0.023607, 0.12401, 0.33314, 0.32537, 0.33765, 0.13328, -0.28842, -0.32644, -0.3399, 0.019148, 0.14635, 0.3311, 0.41088, 0.16012, -0.019261, 0.30465, 0.32149, 0.14719, 0.16078, 0.2658, 0.33182, 0.4257, 0.51795, 0.47992, 0.38966, 0.1105, -0.36126, -0.35567, -0.34887, -0.059256, 0.082424, 0.28441, 0.36038, 0.36631, 0.035008, 0.42698, 0.24036, 0.14583, 0.20709, 0.34422, 0.39134, 0.4876, 0.52584, 0.41396, 0.26888, 0.05512, -0.32547, -0.35359, -0.35091, -0.2321, -0.081827, 0.12509, 0.25227, 0.26187, 0.14308, 0.32105, 0.17048, 0.19226, 0.17779, 0.187, 0.17103, 0.2701, 0.53044, 0.45451, 0.16798, -0.15232, -0.25531, -0.31693, -0.32242, -0.30166, -0.22621, -0.058728, 0.15046, 0.22692, 0.20041, 0.24953, 0.2232, 0.22116, 0.0038758, -0.1402, -0.086258, 0.13385, 0.5597, 0.45889, 0.00082858, -0.30786, -0.30478, -0.36069, -0.3646, -0.34237, -0.22599, -0.090746, 0.055236, 0.21306, 0.19248, 0.15874, 0.19203, 0.21266, -0.085888, -0.22962, -0.10803, 0.28969, 0.59786, 0.44663, -0.13819, -0.37225, -0.35845, -0.38843, -0.38311, -0.31607, -0.18192, -0.079424, 0.043338, 0.26075, 0.27148, 0.07845, 0.12344, 0.13826, -0.10628, -0.22858, -0.1616, 0.28731, 0.51574, 0.36255, 0.014483, -0.43524, -0.4229, -0.41436, -0.35732, -0.2734, -0.16916, -0.011025, 0.14619, 0.2825, 0.16252, 0.071563, 0.033202, 0.045821, -0.20025, -0.31014, -0.29718, 0.0018153, 0.29726, 0.21739, 0.061352, -0.4386, -0.46798, -0.37338, -0.2613, -0.22577, -0.09005, 0.027665, 0.16804, 0.16247, -0.012927, 0.18555, 0.054614, -0.0047887, -0.41073, -0.51898, -0.47066, -0.35947, 0.09923, 0.15756, 0.14246, -0.05112, -0.30455, -0.15878, -0.11603, 0.0086611, 0.16443, 0.26213, 0.1624, 0.030924, -0.18182, 0.36995, 0.16905, 0.02174, -0.52482, -0.74054, -0.66684, -0.62095, -0.2988, 0.1403, 0.19623, 0.18444, 0.13566, 0.16684, 0.19157, 0.2112, 0.27683, 0.24943, 0.10496, -0.040817, -0.25612, 0.4639, 0.39386, 0.11766, -0.46887, -0.66431, -0.59208, -0.53145, -0.37319, 0.032928, 0.31321, 0.35586, 0.3509, 0.31019, 0.29668, 0.28922, 0.29773, 0.23619, 0.096474, -0.058564, -0.12813, 0.27393, 0.22327, 0.04758, -0.3069, -0.42152, -0.37205, -0.34025, -0.27442, -0.065585, 0.14629, 0.27665, 0.37469, 0.35784, 0.29789, 0.19963, 0.22103, 0.10382, -0.049358, -0.10504, -0.085404, -0.011892, -0.013503, -0.030185, -0.087934, -0.11701, -0.11109, -0.11667, -0.09561, -0.070145, -0.029827, 0.12109, 0.17894, 0.19154, 0.064172, 0.035158, 0.029447, -0.019023, -0.055357, -0.052554, -0.036366, 0, -0.0020761, -0.0034602, -0.00094986, -0.0011263, -0.00086844, -8.1417e-05, 0, -0.0034602, -0.0034602, -0.0034602, -0.0034602, -0.010394, -0.030111, -0.03163, -0.009078, -8.1417e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0043287, -0.0055228, -0.0038944, -0.00043422, -0.0024425, -0.0043287, -0.0035416, -0.0034602, -0.0034602, -0.0021575, -0.00099057, -0.0077889, -0.022362, -0.028808, -0.028713, -0.0157, -0.0062691, -0.00032567, -0.00012212, 0, -0.045512, -0.064346, -0.058698, -0.04846, -0.010232, 0.063854, 0.15312, 0.23522, 0.35443, 0.42014, 0.40201, 0.36215, 0.29154, 0.042641, -0.060486, -0.066896, -0.093102, -0.082353, -0.063342, -0.040179, -0.0977, -0.15146, -0.17103, -0.024089, 0.15699, 0.287, 0.40587, 0.50019, 0.58722, 0.59852, 0.61825, 0.62373, 0.62384, 0.51201, 0.35439, 0.25117, 0.015751, -0.22094, -0.19519, -0.099898, -0.16728, -0.29262, -0.076333, 0.14104, 0.26305, 0.31926, 0.40954, 0.50188, 0.57349, 0.5578, 0.51246, 0.60111, 0.63965, 0.58013, 0.44146, 0.40718, 0.2871, 0.057666, -0.24886, -0.19208, -0.15478, -0.10346, 0.063172, 0.19479, 0.28986, 0.26607, 0.22191, 0.24804, 0.39573, 0.46886, 0.48081, 0.45029, 0.40985, 0.39166, 0.31277, 0.36204, 0.39324, 0.27568, -0.0060901, -0.28304, -0.13105, 0.080691, 0.12558, 0.27745, 0.24539, 0.10768, -0.02086, 0.16205, 0.47552, 0.4967, 0.36656, 0.062949, -0.10959, -0.0994, -0.076244, 0.17729, 0.36671, 0.28808, 0.1955, -0.14901, 0.062157, 0.11271, 0.16588, 0.17537, 0.040359, -0.026142, -0.041605, 0.23652, 0.51728, 0.38819, -0.075989, -0.20896, -0.25152, -0.25644, -0.23421, -0.099684, 0.080471, 0.17852, 0.21757, 0.11406, 0.10018, 0.096273, 0.062258, 0.026758, -0.12027, -0.21581, -0.088569, 0.42701, 0.47175, 0.1749, -0.23196, -0.35579, -0.38741, -0.38311, -0.31607, -0.1925, -0.037698, 0.057605, 0.22667, 0.23707, 0.11455, 0.099886, -0.050474, -0.24538, -0.22187, -0.204, -0.055742, 0.427, 0.36411, 0.02401, -0.34579, -0.43033, -0.41632, -0.35928, -0.26752, -0.18657, -0.077502, 0.03908, 0.19547, 0.29133, 0.12277, 0.0049682, -0.16812, -0.3512, -0.31014, -0.30042, -0.19581, 0.22234, 0.21243, -0.062324, -0.45585, -0.49327, -0.40774, -0.2695, -0.22542, -0.20975, -0.17173, -0.068903, 0.15718, 0.26478, 0.12196, 0.030808, -0.17669, -0.34931, -0.43713, -0.46484, -0.42225, -0.009092, 0.15723, 0.053879, -0.21776, -0.34739, -0.24242, -0.15899, -0.11831, -0.11413, 0.028768, 0.098808, 0.15641, 0.06293, 0.080703, 0.093121, -0.1117, -0.1814, -0.27982, -0.60498, -0.61703, -0.29122, 0.13793, 0.18446, 0.090951, 0.015957, 0.01947, 0.04176, 0.033656, 0.14727, 0.20978, 0.16818, 0.10858, -0.11375, 0.055078, 0.16075, 0.12529, -0.0041089, -0.11997, -0.43812, -0.51525, -0.4023, 0.039707, 0.36118, 0.3588, 0.35948, 0.30693, 0.29022, 0.29202, 0.31981, 0.35279, 0.28491, 0.035316, -0.14542, -0.04899, 0.024602, 0.14542, 0.14097, 0.056531, -0.25706, -0.33393, -0.26026, -0.11066, 0.27231, 0.43814, 0.48944, 0.4201, 0.35389, 0.34865, 0.38863, 0.35953, 0.15274, -0.054322, -0.084241, -0.041667, -0.012503, 0.028575, 0.068387, 0.014047, -0.073648, -0.11667, -0.09561, -0.068793, 0.025185, 0.10431, 0.26561, 0.29829, 0.26584, 0.21251, 0.15723, 0.052973, -0.030625, -0.051542, -0.036366, 0, -0.0020761, -0.0034602, -0.00094986, -0.0011263, -0.00086844, -8.1417e-05, 0, -0.0034602, -0.0034602, -0.0034602, -0.0034602, -0.010394, -0.030111, -0.03163, -0.009078, -8.1417e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.037371, 0.04768, 0.033622, 0.0037488, -0.0024425, -0.0043287, -0.0035416, -0.0034602, -0.0034602, -0.0021575, -0.00099057, -0.0077889, -0.022362, -0.028808, -0.028713, -0.0157, -0.0062691, -0.00032567, -0.00012212, 0, 0.35305, 0.48585, 0.40762, 0.12917, -0.10511, -0.13134, -0.13012, -0.097985, -0.096927, -0.090427, -0.094633, -0.1388, -0.20486, -0.24654, -0.29047, -0.21478, -0.13814, -0.082353, -0.063342, -0.040179, 0.68779, 0.7629, 0.56619, -0.012758, -0.35703, -0.46013, -0.41361, -0.32789, -0.27451, -0.28257, -0.33633, -0.31036, -0.32644, -0.3883, -0.50291, -0.4795, -0.44611, -0.34023, -0.20112, -0.091532, 0.64004, 0.60121, 0.30158, -0.25375, -0.56955, -0.57663, -0.53986, -0.47421, -0.42474, -0.4422, -0.48754, -0.39889, -0.35567, -0.41456, -0.54314, -0.55464, -0.51407, -0.523, -0.30909, -0.10371, 0.5218, 0.37059, 0.16677, -0.29442, -0.6059, -0.56846, -0.50333, -0.47416, -0.51496, -0.51482, -0.48238, -0.39361, -0.34784, -0.29196, -0.24341, -0.16242, -0.061255, -0.036349, 0.015403, 0.24231, 0.32619, 0.2427, 0.16491, -0.17728, -0.40369, -0.33571, -0.34546, -0.43757, -0.48703, -0.46129, -0.32179, -0.076398, 0.16817, 0.32751, 0.46956, 0.50978, 0.39057, 0.20285, 0.16813, 0.31345, 0.16583, 0.22479, 0.20039, -0.060144, -0.23149, -0.25574, -0.28196, -0.37631, -0.43299, -0.17549, 0.20245, 0.43624, 0.48049, 0.50521, 0.57423, 0.68485, 0.60833, 0.3082, 0.18002, 0.15994, 0.067136, 0.19203, 0.19059, 0.040378, -0.22756, -0.23157, -0.14956, -0.066207, -0.0072162, 0.24285, 0.45024, 0.56456, 0.53929, 0.56238, 0.6119, 0.63307, 0.49531, 0.11544, -0.19229, -0.26866, -0.010349, 0.12417, 0.10965, 0.03214, -0.18374, -0.026094, 0.26004, 0.30528, 0.27597, 0.33679, 0.42871, 0.48371, 0.41505, 0.33301, 0.23522, 0.21919, 0.0047918, -0.41177, -0.60495, -0.57808, 0.042886, 0.033937, 0.066818, 0.0046543, 0.08319, 0.38488, 0.49771, 0.32386, 0.19733, 0.11791, -0.0036619, 0.012566, -0.11, -0.094449, -0.16883, -0.21887, -0.43906, -0.74125, -0.8146, -0.65703, 0.11635, 0.051428, 0.065955, 0.066005, 0.3256, 0.50046, 0.46295, 0.14791, -0.10835, -0.31969, -0.5512, -0.49988, -0.4191, -0.32377, -0.33937, -0.42748, -0.63322, -0.83086, -0.83954, -0.58476, 0.31531, 0.16782, 0.083995, 0.1534, 0.23868, 0.30832, 0.14076, -0.22888, -0.58289, -0.73854, -0.7838, -0.73382, -0.62164, -0.58392, -0.5986, -0.66361, -0.74101, -0.81968, -0.7152, -0.39509, 0.53887, 0.46845, 0.29315, 0.26771, 0.16066, -0.054951, -0.28713, -0.4021, -0.51554, -0.58568, -0.6412, -0.64052, -0.67511, -0.69131, -0.67977, -0.64945, -0.63734, -0.60009, -0.3767, -0.17249, 0.60721, 0.74276, 0.55422, 0.26248, -0.07943, -0.30996, -0.32431, -0.27, -0.22527, -0.2738, -0.39247, -0.4845, -0.5799, -0.64611, -0.6277, -0.49233, -0.37988, -0.28686, -0.13617, -0.09006, 0.35442, 0.4436, 0.33413, 0.15526, -0.01165, -0.10364, -0.11667, -0.09561, -0.072841, -0.080318, -0.13137, -0.1979, -0.294, -0.37173, -0.35295, -0.20242, -0.10579, -0.069082, -0.052554, -0.036366, 0, 0.017924, 0.029873, 0.0074162, 0.0013574, -0.00086844, -8.1417e-05, 0, -0.0034602, -0.0034602, -0.0034602, -0.0034602, -0.010394, -0.030111, -0.03163, -0.009078, -8.1417e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0043287, -0.0055228, -0.0038944, -0.00043422, -0.0024425, -0.0043287, -0.0035416, -0.0034602, -0.0034602, -0.0021575, -0.00099057, -0.0077889, -0.022362, -0.028808, -0.028713, -0.0157, -0.0062691, -0.00032567, -0.00012212, 0, -0.045512, -0.061657, -0.039683, -0.0059376, 0.0018939, 0.0038995, -0.03544, -0.068293, -0.096814, -0.089082, -0.046678, 0.019069, 0.12332, 0.24175, 0.24936, 0.20707, 0.092003, -0.00067227, -0.047208, -0.040179, -0.0977, -0.12293, -0.01045, 0.13505, 0.28111, 0.28789, 0.15939, -0.015063, -0.21322, -0.23226, -0.0045675, 0.30398, 0.4488, 0.51601, 0.47334, 0.44005, 0.38403, 0.069857, -0.084219, -0.087685, -0.12695, -0.022958, 0.18392, 0.32888, 0.39478, 0.41564, 0.42619, 0.40276, 0.041257, -0.11436, 0.21263, 0.43641, 0.60075, 0.5609, 0.41633, 0.41131, 0.42044, 0.31128, 0.054792, -0.1049, -0.049723, 0.16513, 0.24186, 0.27778, 0.36485, 0.40476, 0.47168, 0.52315, 0.43025, 0.2603, 0.34888, 0.51306, 0.46994, 0.31174, 0.18709, 0.27198, 0.31734, 0.27086, 0.19697, -0.051941, 0.073506, 0.21936, 0.18973, 0.097043, 0.089418, 0.15135, 0.38608, 0.498, 0.51274, 0.498, 0.5421, 0.41197, 0.0050889, -0.21486, -0.26612, -0.13802, 0.15257, 0.23788, 0.19298, 0.0068239, 0.18594, 0.19891, 0.011387, -0.053477, -0.16304, -0.18695, -0.086553, 0.1492, 0.5146, 0.55599, 0.49293, 0.0065703, -0.3264, -0.35384, -0.33173, -0.23836, -0.00081959, 0.078005, 0.16792, 0.1899, 0.2229, 0.11013, -0.074419, -0.21344, -0.23501, -0.23719, -0.22958, -0.07982, 0.4441, 0.51918, 0.29978, -0.14254, -0.38843, -0.38311, -0.31607, -0.19896, -0.089792, 0.0010584, 0.16787, 0.27284, 0.18623, 0.036331, -0.15812, -0.26532, -0.22858, -0.204, -0.25595, -0.20891, 0.34161, 0.40922, 0.15162, -0.17583, -0.38271, -0.35648, -0.27536, -0.18657, -0.097244, 0.048828, 0.18043, 0.28896, 0.1114, -0.010208, -0.16655, -0.21249, -0.2725, -0.27747, -0.33268, -0.13614, 0.21826, 0.21687, 0.12523, -0.17098, -0.21757, -0.27079, -0.27602, -0.25547, -0.10896, 0.0069437, 0.10301, 0.13711, -0.14564, 0.026554, 0.051874, 0.051514, -0.14732, -0.10281, 0.063022, 0.18336, 0.13916, 0.047308, 0.15952, 0.056345, -0.057081, -0.072568, -0.19289, -0.1979, -0.074899, 0.049367, 0.11385, -0.029916, -0.3426, -0.047362, 0.066404, 0.17647, 0.22338, 0.25226, 0.32716, 0.23287, -0.0087139, -0.067974, 0.093343, 0.2496, 0.19617, 0.10717, 0.070081, 0.12641, 0.16812, 0.18021, 0.1751, -0.095704, -0.27209, -0.2095, 0.065703, 0.27279, 0.32864, 0.40143, 0.40726, 0.25956, -0.085815, -0.20798, 0.074882, 0.26973, 0.32086, 0.29637, 0.307, 0.33879, 0.36109, 0.2966, 0.075736, -0.10404, -0.14298, -0.17457, -0.11704, 0.17411, 0.33736, 0.35344, 0.26983, 0.068136, -0.16756, -0.20736, 0.015486, 0.13041, 0.22772, 0.25103, 0.32995, 0.41143, 0.42595, 0.17297, -0.069727, -0.089164, -0.045715, -0.064116, -0.063631, -0.026999, 0.014531, 0.014845, -0.025354, -0.035218, -0.072841, -0.078973, -0.090693, -0.012126, 0.12752, 0.15342, 0.16469, 0.18963, 0.088722, -0.030987, -0.051658, -0.036366, 0, -0.0020761, -0.0034602, -0.00094986, -0.0011263, -0.00086844, -8.1417e-05, 0, -0.0034602, -0.0034602, -0.0034602, -0.0034602, -0.010394, -0.030111, -0.03163, -0.009078, -8.1417e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0043287, -0.0055228, -0.0038944, -0.00043422, 0.0017405, 0.029005, 0.029792, 0.029873, 0.029873, 0.018627, -0.00099057, -0.0077889, -0.022362, -0.028808, -0.028713, -0.012955, -0.0031318, 0.0028116, 0.0010543, 0, -0.045512, -0.05951, -0.044146, 0.040281, 0.23855, 0.33036, 0.39956, 0.34136, 0.26765, 0.11611, -0.056594, -0.13501, -0.20486, -0.24301, -0.27151, -0.12772, -0.038791, -0.024837, -0.043211, -0.039787, -0.096393, -0.081151, 0.030633, 0.32829, 0.40703, 0.50183, 0.58639, 0.66518, 0.64732, 0.48684, 0.18027, -0.1467, -0.32644, -0.38164, -0.40317, -0.024079, 0.065656, 0.13337, 0.0058091, 0.015788, -0.1163, -0.0097736, 0.20969, 0.34873, 0.40757, 0.40154, 0.42785, 0.4871, 0.57526, 0.5544, 0.4624, 0.16164, -0.2873, -0.39953, -0.4621, -0.027584, 0.12227, 0.23059, 0.16986, 0.10688, -0.11049, 0.17176, 0.24534, 0.30833, 0.25214, 0.12487, 0.12151, 0.15983, 0.25759, 0.4023, 0.51762, 0.57149, 0.095689, -0.35745, -0.39151, -0.097709, 0.017568, 0.10077, 0.21253, 0.17263, 0.069846, 0.24858, 0.22034, 0.061674, -0.11428, -0.18355, -0.21631, -0.29117, -0.25017, 0.029299, 0.57468, 0.71079, 0.44621, -0.23014, -0.34508, -0.23754, -0.0676, 0.060759, 0.17244, 0.23032, 0.17367, 0.19329, 0.05542, -0.12119, -0.19372, -0.22659, -0.25281, -0.3533, -0.44161, -0.27066, 0.40899, 0.69284, 0.49591, -0.17898, -0.34237, -0.26195, -0.13141, 0.1197, 0.18225, 0.23746, 0.23067, 0.1119, -0.090329, -0.26825, -0.23501, -0.23719, -0.23519, -0.34503, -0.52408, -0.36603, 0.18802, 0.62599, 0.54007, -0.11631, -0.31607, -0.19699, -0.069007, 0.21439, 0.24614, 0.15435, 0.16638, 0.093194, -0.16434, -0.28315, -0.22688, -0.204, -0.26245, -0.41171, -0.62299, -0.49367, 0.10191, 0.54868, 0.39152, -0.1934, -0.23981, -0.071664, 0.0627, 0.26679, 0.20655, 0.099174, -0.15358, 0.024918, 0.016099, -0.14254, -0.22884, -0.24976, -0.33929, -0.56124, -0.69509, -0.57555, 0.067841, 0.4323, 0.14229, -0.13118, -0.081506, -0.026447, 0.14499, 0.17378, 0.033769, -0.08814, -0.30705, 0.018879, 0.077197, 0.16091, -0.052964, -0.18007, -0.32542, -0.53901, -0.51567, -0.23002, 0.13912, 0.31711, 0.0070462, -0.0083475, 0.087166, 0.19043, 0.2043, 0.028097, -0.076927, -0.29247, -0.37959, -0.15362, 0.080858, 0.17249, 0.19554, 0.18662, 0.16402, 0.075824, 0.084302, 0.17584, 0.18444, 0.19624, 0.15679, 0.23909, 0.3512, 0.25809, 0.1335, -0.047127, -0.33181, -0.35326, -0.26597, -0.32502, -0.062401, 0.23621, 0.3323, 0.40792, 0.4679, 0.50326, 0.46981, 0.41432, 0.3588, 0.35582, 0.29823, 0.2568, 0.21474, 0.20715, 0.12318, -0.23892, -0.33853, -0.15066, -0.14298, -0.18587, -0.17427, 0.001299, 0.23377, 0.44259, 0.54158, 0.65654, 0.74271, 0.70123, 0.56439, 0.43472, 0.30101, 0.12291, 0.056357, -0.0068363, -0.16262, -0.27483, -0.13617, -0.09006, -0.045715, -0.064116, -0.069139, -0.069315, -0.052173, 0.064463, 0.21287, 0.25838, 0.40925, 0.48635, 0.41661, 0.2506, 0.041168, -0.1818, -0.24537, -0.14974, -0.099513, -0.069082, -0.052554, -0.036366, 0, -0.0020761, -0.0034602, -0.00094986, -0.0011263, -0.00086844, -8.1417e-05, 0, 0.029873, 0.029873, 0.029873, 0.029873, -0.010394, -0.030111, -0.03163, -0.009078, -8.1417e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
    };
    // load templates
    for (int i = 0; i < 9; i++) {
        Mat t = Mat(NUMRECT_DIM, NUMRECT_DIM, CV_32F, T[i]);
        transpose(t, templates[i]);
    }

    // cuz we can't use to_string
    vector<string> numToString(9);
    numToString[0] = "1";
    numToString[1] = "2";
    numToString[2] = "3";
    numToString[3] = "4";
    numToString[4] = "5";
    numToString[5] = "6";
    numToString[6] = "7";
    numToString[7] = "8";
    numToString[8] = "9";

    // images for number overlay
    const int OVERLAY_ROWS = 30;
    const int OVERLAY_COLS = 26;
    vector<Mat> overlays(9);

    float O[9][780] = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.494118, 1, 1, 1, 0.466667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.780392, 1, 1, 1, 1, 0.545098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.454902, 0.952941, 1, 1, 1, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.329412, 0.701961, 0.988235, 1, 1, 1, 0.976471, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.192157, 0.662745, 1, 1, 1, 1, 0.85098, 0.890196, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.180392, 0.72549, 1, 1, 0.976471, 0.658824, 0.345098, 0.878431, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.180392, 0.72549, 0.768627, 0.176471, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.87451, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.898039, 1, 1, 0.403922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.113725, 0.929412, 1, 1, 0.521569, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.105882, 0.207843, 0.164706, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0235294, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0.0235294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0470588, 0.796078, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.796078, 0.0470588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 0.843137, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.843137, 0.156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.478431, 1, 1, 1, 0.992157, 0.6, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.101961, 0.6, 0.988235, 1, 1, 0.996078, 0.482353, 0, 0, 0, 0, 0, 0, 0, 0, 0.0862745, 0.87451, 1, 1, 0.988235, 0.321569, 0.0156863, 0, 0, 0, 0, 0, 0.0156863, 0.329412, 0.988235, 1, 1, 0.878431, 0.0862745, 0, 0, 0, 0, 0, 0, 0.0235294, 0.568627, 1, 1, 1, 0.643137, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.647059, 1, 1, 1, 0.556863, 0.0235294, 0, 0, 0, 0, 0, 0.0470588, 0.729412, 1, 1, 0.988235, 0.368627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.258824, 0.988235, 1, 1, 0.662745, 0.0156863, 0, 0, 0, 0, 0, 0, 0.611765, 1, 1, 0.968627, 0.176471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.972549, 1, 1, 0.411765, 0, 0, 0, 0, 0, 0, 0, 0.00784314, 0.470588, 0.827451, 0.168627, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.290196, 1, 1, 1, 0.721569, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.862745, 1, 1, 0.94902, 0.188235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.435294, 1, 1, 1, 0.678431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054902, 0.909804, 1, 1, 0.988235, 0.352941, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0392157, 0.537255, 1, 1, 1, 0.65098, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.54902, 1, 1, 1, 0.741176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.145098, 1, 1, 1, 1, 0.180392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 1, 1, 1, 1, 0.756863, 0.0313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 1, 1, 1, 1, 0.317647, 0.054902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 1, 1, 1, 1, 0.313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 1, 1, 1, 1, 0.313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 1, 1, 1, 1, 0.313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 1, 1, 1, 1, 0.313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 1, 1, 1, 1, 0.313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 1, 1, 1, 1, 0.313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 1, 1, 1, 1, 0.313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.188235, 1, 1, 1, 1, 0.454902, 0.207843, 0.207843, 0.207843, 0.207843, 0.207843, 0.207843, 0.207843, 0.207843, 0.207843, 0.207843, 0.207843, 0.145098, 0.0392157, 0, 0, 0, 0, 0, 0, 0.4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.831373, 0, 0, 0, 0, 0, 0.0235294, 0.584314, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.458824, 0, 0, 0, 0, 0.00784314, 0.0235294, 0.0156863, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.0235294, 0.0313726, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054902, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.301961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.341176, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.913725, 0.0235294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0470588, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.168627, 0.941176, 1, 1, 0.964706, 0.129412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.756863, 1, 1, 0.980392, 0.309804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.478431, 1, 1, 1, 0.584314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.227451, 0.980392, 1, 1, 0.839216, 0.0313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0784314, 0.933333, 1, 1, 0.960784, 0.121569, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.756863, 1, 1, 0.980392, 0.32549, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.737255, 1, 1, 1, 1, 0.917647, 0.415686, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.360784, 1, 1, 1, 1, 1, 1, 0.988235, 0.8, 0.478431, 0.0862745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00784314, 0.27451, 0.647059, 1, 1, 1, 1, 1, 1, 1, 0.984314, 0.486275, 0.0470588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00784314, 0.313726, 0.678431, 0.764706, 0.639216, 0.819608, 0.964706, 1, 1, 1, 0.992157, 0.443137, 0.0313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2, 0.831373, 1, 1, 1, 0.721569, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0784314, 0.87451, 1, 1, 0.823529, 0.0470588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.329412, 1, 1, 1, 0.301961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.188235, 0.972549, 1, 1, 0.85098, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.145098, 0.937255, 1, 1, 0.768627, 0.054902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.133333, 0.909804, 1, 1, 0.682353, 0.0627451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.117647, 0.980392, 1, 1, 0.890196, 0.0235294, 0, 0, 0, 0, 0.0235294, 0.619608, 0.811765, 0.286275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.270588, 1, 1, 1, 0.356863, 0, 0, 0, 0, 0.0313726, 0.721569, 1, 1, 0.92549, 0.0784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0823529, 0.784314, 1, 1, 0.87451, 0.0784314, 0, 0, 0, 0, 0.0627451, 0.509804, 1, 1, 1, 0.588235, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.290196, 0.992157, 1, 1, 0.741176, 0.0156863, 0, 0, 0, 0, 0, 0.156863, 0.913725, 1, 1, 0.984314, 0.505882, 0.054902, 0, 0, 0, 0, 0, 0, 0.0862745, 0.482353, 0.996078, 1, 1, 0.992157, 0.584314, 0.0235294, 0, 0, 0, 0, 0, 0.0156863, 0.666667, 1, 1, 1, 0.992157, 0.839216, 0.490196, 0.211765, 0.207843, 0.207843, 0.235294, 0.568627, 0.890196, 0.996078, 1, 1, 1, 0.560784, 0.113725, 0, 0, 0, 0, 0, 0, 0.00784314, 0.239216, 0.796078, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.352941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 0.772549, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.643137, 0.0784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054902, 0.0980392, 0.0235294, 0.0235294, 1, 1, 1, 1, 0.0235294, 0.0156863, 0.113725, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054902, 0.054902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0470588, 0.843137, 1, 1, 0.870588, 0.0313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.768627, 1, 1, 1, 0.886275, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.47451, 1, 1, 1, 1, 0.788235, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2, 1, 1, 1, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054902, 0.898039, 1, 1, 0.984314, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.619608, 1, 1, 0.972549, 0.741176, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.309804, 1, 1, 1, 0.690196, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.94902, 1, 1, 0.913725, 0.0705882, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.780392, 1, 1, 0.980392, 0.247059, 0, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.47451, 1, 1, 1, 0.545098, 0, 0, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2, 0.976471, 1, 1, 0.835294, 0.0313726, 0, 0, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054902, 0.898039, 1, 1, 0.964706, 0.137255, 0, 0, 0, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.619608, 1, 1, 0.972549, 0.372549, 0, 0, 0, 0, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.309804, 1, 1, 1, 0.690196, 0, 0, 0, 0, 0, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.94902, 1, 1, 0.913725, 0.0705882, 0, 0, 0, 0, 0, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.176471, 0.905882, 1, 1, 0.992157, 0.690196, 0.592157, 0.592157, 0.592157, 0.592157, 0.592157, 0.592157, 0.831373, 1, 1, 0.913725, 0.607843, 0.592157, 0.615686, 0.717647, 0.596078, 0.129412, 0, 0, 0, 0.0627451, 0.603922, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.94902, 0.45098, 0.121569, 0, 0, 0.0392157, 0.560784, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.658824, 0.0823529, 0, 0, 0, 0.0392157, 0.701961, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.792157, 0.0901961, 0, 0, 0, 0, 0, 0.00784314, 0.0235294, 0.0470588, 0.0392157, 0.0392157, 0.0392157, 0.0392157, 0.0392157, 0.0392157, 0.0392157, 0.0392157, 0.603922, 1, 1, 0.792157, 0.0784314, 0.0392157, 0.0392157, 0.0313726, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.592157, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.607843, 1, 1, 0.815686, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.72549, 1, 1, 0.87451, 0.0470588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00784314, 0.0784314, 0.180392, 0.207843, 0.101961, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.160784, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.619608, 0.054902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.333333, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.956863, 0.329412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.462745, 1, 1, 0.882353, 0.172549, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0470588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.560784, 1, 1, 0.803922, 0.0470588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.686275, 1, 1, 0.737255, 0.0235294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0313726, 0.760784, 1, 1, 0.623529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0627451, 0.839216, 1, 1, 0.533333, 0, 0.0470588, 0.0980392, 0.0980392, 0.0980392, 0.101961, 0.0313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.878431, 1, 1, 0.529412, 0.572549, 0.94902, 1, 1, 1, 1, 0.898039, 0.486275, 0.172549, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.164706, 0.921569, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.482353, 0.0823529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.301961, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.976471, 0.262745, 0, 0, 0, 0, 0, 0, 0, 0, 0.0235294, 0.666667, 1, 1, 1, 0.996078, 0.937255, 0.756863, 0.588235, 0.47451, 0.521569, 0.592157, 0.811765, 0.960784, 0.996078, 1, 1, 0.996078, 0.321569, 0.0392157, 0, 0, 0, 0, 0, 0, 0.0156863, 0.529412, 1, 1, 0.988235, 0.698039, 0.168627, 0, 0, 0, 0, 0, 0.0235294, 0.231373, 0.741176, 1, 1, 1, 0.984314, 0.443137, 0.0313726, 0, 0, 0, 0, 0, 0, 0.0156863, 0.470588, 0.721569, 0.4, 0.0823529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.384314, 1, 1, 1, 0.717647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0784314, 0.870588, 1, 1, 0.823529, 0.0470588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.329412, 1, 1, 1, 0.301961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.188235, 0.972549, 1, 1, 0.85098, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.145098, 0.937255, 1, 1, 0.768627, 0.054902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.133333, 0.909804, 1, 1, 0.682353, 0.0627451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.117647, 0.980392, 1, 1, 0.890196, 0.0235294, 0, 0, 0, 0, 0.0235294, 0.619608, 0.811765, 0.286275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.270588, 1, 1, 1, 0.356863, 0, 0, 0, 0, 0.0313726, 0.721569, 1, 1, 0.92549, 0.0784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0823529, 0.784314, 1, 1, 0.87451, 0.0784314, 0, 0, 0, 0, 0.0627451, 0.509804, 1, 1, 1, 0.588235, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.290196, 0.992157, 1, 1, 0.741176, 0.0156863, 0, 0, 0, 0, 0, 0.156863, 0.913725, 1, 1, 0.984314, 0.505882, 0.054902, 0, 0, 0, 0, 0, 0, 0.0862745, 0.482353, 0.996078, 1, 1, 0.992157, 0.584314, 0.0235294, 0, 0, 0, 0, 0, 0.0156863, 0.666667, 1, 1, 1, 0.992157, 0.839216, 0.490196, 0.211765, 0.207843, 0.207843, 0.235294, 0.568627, 0.890196, 0.996078, 1, 1, 1, 0.560784, 0.113725, 0, 0, 0, 0, 0, 0, 0.00784314, 0.239216, 0.796078, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.352941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 0.772549, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.643137, 0.0784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054902, 0.0980392, 0.0235294, 0.0235294, 1, 1, 1, 1, 0.0235294, 0.0156863, 0.113725, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0392157, 0.00784314, 0.0392157, 0, 0, 1, 1, 1, 0, 0, 0, 0.0235294, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.462745, 0.976471, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.8, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.141176, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.992157, 0.466667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.74902, 1, 1, 1, 0.823529, 0.392157, 0.133333, 0.0980392, 0.0980392, 0.262745, 0.631373, 0.980392, 1, 1, 0.909804, 0.101961, 0, 0, 0, 0, 0, 0, 0, 0, 0.00784314, 0.635294, 1, 1, 1, 0.584314, 0.0705882, 0, 0, 0, 0, 0, 0, 0.482353, 1, 1, 1, 0.545098, 0.0156863, 0, 0, 0, 0, 0, 0, 0.00784314, 0.341176, 0.976471, 1, 1, 0.909804, 0.054902, 0, 0, 0, 0, 0, 0, 0, 0.203922, 0.847059, 0.964706, 0.737255, 0.352941, 0.0235294, 0, 0, 0, 0, 0, 0, 0, 0.478431, 1, 1, 0.996078, 0.45098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.266667, 0.376471, 0.337255, 0.0235294, 0, 0, 0, 0, 0, 0, 0, 0, 0.501961, 1, 1, 0.929412, 0.0784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.690196, 1, 1, 0.745098, 0.0235294, 0, 0, 0, 0.0313726, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0627451, 0.847059, 1, 1, 0.533333, 0, 0.0470588, 0.215686, 0.72549, 1, 1, 0.831373, 0.286275, 0.0784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.172549, 0.937255, 1, 1, 0.494118, 0.658824, 0.886275, 1, 1, 1, 1, 1, 1, 0.921569, 0.694118, 0.333333, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0.0235294, 0.615686, 1, 1, 0.968627, 0.882353, 0.996078, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.929412, 0.219608, 0, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.690196, 1, 1, 0.996078, 1, 1, 1, 1, 0.933333, 0.898039, 0.921569, 0.937255, 1, 1, 1, 1, 0.945098, 0.054902, 0, 0, 0, 0, 0, 0, 0, 0, 0.403922, 1, 1, 1, 1, 1, 0.956863, 0.521569, 0.121569, 0, 0, 0.0823529, 0.427451, 0.898039, 1, 1, 1, 0.964706, 0.321569, 0, 0, 0, 0, 0, 0, 0, 0.396078, 1, 1, 1, 1, 0.811765, 0, 0, 0, 0, 0, 0, 0, 0, 0.568627, 1, 1, 1, 0.741176, 0.00784314, 0, 0, 0, 0, 0, 0, 0.396078, 1, 1, 1, 0.972549, 0.176471, 0, 0, 0, 0, 0, 0, 0, 0, 0.0862745, 0.913725, 1, 1, 0.784314, 0.0392157, 0, 0, 0, 0, 0, 0, 0.482353, 1, 1, 1, 0.658824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.392157, 1, 1, 0.956863, 0.243137, 0, 0, 0, 0, 0, 0.0470588, 0.823529, 1, 1, 1, 0.556863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.243137, 0.968627, 1, 1, 0.780392, 0.054902, 0, 0, 0, 0, 0.0313726, 0.839216, 1, 1, 1, 0.45098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.215686, 0.980392, 1, 1, 0.870588, 0.101961, 0, 0, 0, 0, 0, 0.192157, 0.968627, 1, 1, 0.376471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.121569, 0.976471, 1, 1, 0.898039, 0.0235294, 0, 0, 0, 0, 0, 0.0470588, 0.811765, 1, 1, 0.635294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.270588, 1, 1, 1, 0.356863, 0, 0, 0, 0, 0, 0, 0, 0.6, 1, 1, 0.913725, 0.176471, 0, 0, 0, 0, 0, 0, 0, 0, 0.0823529, 0.776471, 1, 1, 0.878431, 0.0784314, 0, 0, 0, 0, 0, 0, 0, 0.501961, 1, 1, 0.996078, 0.501961, 0, 0, 0, 0, 0, 0, 0, 0, 0.290196, 0.996078, 1, 1, 0.741176, 0.0156863, 0, 0, 0, 0, 0, 0, 0.00784314, 0.380392, 0.984314, 1, 1, 1, 0.584314, 0.14902, 0, 0, 0, 0, 0.0862745, 0.482353, 0.996078, 1, 1, 0.996078, 0.588235, 0.0235294, 0, 0, 0, 0, 0, 0, 0, 0.0705882, 0.419608, 0.992157, 1, 1, 1, 0.941176, 0.639216, 0.266667, 0.243137, 0.568627, 0.890196, 0.996078, 1, 1, 1, 0.568627, 0.117647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.168627, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.352941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0313726, 0.513726, 0.956863, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.643137, 0.0784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0313726, 0.105882, 0.0156863, 0.0235294, 1, 1, 0.0392157, 0.0156863, 0.113725, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.0392157, 0, 0, 0, 0, 0, 0, 0.235294, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.635294, 0, 0, 0, 0, 0, 0.0235294, 0.780392, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.992157, 0.317647, 0, 0, 0, 0, 0, 0, 0.0156863, 0.0705882, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.180392, 0.921569, 1, 1, 0.709804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.466667, 1, 1, 0.94902, 0.227451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0705882, 0.890196, 1, 1, 0.760784, 0.0235294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.403922, 1, 1, 0.94902, 0.282353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0627451, 0.870588, 1, 1, 0.788235, 0.0235294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.372549, 1, 1, 0.945098, 0.309804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0470588, 0.835294, 1, 1, 0.835294, 0.0470588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.309804, 1, 1, 0.937255, 0.372549, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0392157, 0.811765, 1, 1, 0.85098, 0.054902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.282353, 1, 1, 1, 0.403922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0235294, 0.760784, 1, 1, 0.890196, 0.0705882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.227451, 0.94902, 1, 1, 0.466667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.733333, 1, 1, 0.898039, 0.0784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.207843, 0.94902, 1, 1, 0.505882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.670588, 1, 1, 0.921569, 0.105882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.156863, 0.941176, 1, 1, 0.576471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.603922, 1, 1, 0.929412, 0.129412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.145098, 0.937255, 1, 1, 0.603922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.576471, 1, 1, 0.941176, 0.156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.105882, 0.921569, 1, 1, 0.670588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.505882, 1, 1, 0.945098, 0.184314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.105882, 0.913725, 1, 1, 0.701961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.588235, 1, 1, 0.94902, 0.227451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0470588, 0.8, 1, 1, 0.709804, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.0156863, 0.0627451, 0.152941, 0.0313726, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00784314, 0.0235294, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0.0235294, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00784314, 0.796078, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.8, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.466667, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.992157, 0.466667, 0, 0, 0, 0, 0, 0, 0, 0, 0.101961, 0.913725, 1, 1, 0.980392, 0.631373, 0.262745, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.0980392, 0.262745, 0.631373, 0.980392, 1, 1, 0.913725, 0.101961, 0, 0, 0, 0, 0, 0, 0.0156863, 0.639216, 1, 1, 1, 0.501961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.494118, 1, 1, 1, 0.643137, 0.0156863, 0, 0, 0, 0, 0, 0.0235294, 0.611765, 1, 1, 0.976471, 0.266667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.262745, 0.976471, 1, 1, 0.607843, 0.0235294, 0, 0, 0, 0, 0, 0.0313726, 0.521569, 1, 1, 0.968627, 0.227451, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.227451, 0.964706, 1, 1, 0.513726, 0.0313726, 0, 0, 0, 0, 0, 0, 0.678431, 1, 1, 1, 0.352941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.34902, 1, 1, 1, 0.682353, 0, 0, 0, 0, 0, 0, 0, 0.117647, 0.933333, 1, 1, 0.956863, 0.211765, 0, 0, 0, 0, 0, 0, 0, 0.211765, 0.952941, 1, 1, 0.937255, 0.121569, 0, 0, 0, 0, 0, 0, 0, 0, 0.545098, 1, 1, 1, 0.984314, 0.92549, 0.509804, 0.207843, 0.14902, 0.207843, 0.521569, 0.933333, 0.984314, 1, 1, 1, 0.54902, 0, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.196078, 0.921569, 1, 1, 1, 1, 1, 1, 0.988235, 1, 1, 1, 1, 1, 1, 0.921569, 0.196078, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.27451, 0.658824, 0.976471, 0.996078, 1, 1, 1, 1, 1, 1, 1, 0.996078, 0.980392, 0.662745, 0.278431, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.168627, 0.854902, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.858824, 0.172549, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.796078, 1, 1, 1, 1, 1, 1, 0.917647, 1, 1, 1, 1, 1, 1, 0.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.290196, 0.909804, 1, 1, 1, 0.968627, 0.611765, 0.172549, 0.0313726, 0, 0.0313726, 0.172549, 0.611765, 0.968627, 1, 1, 1, 0.909804, 0.286275, 0, 0, 0, 0, 0, 0, 0, 0.701961, 1, 1, 1, 0.815686, 0.0235294, 0, 0, 0, 0, 0, 0, 0, 0.0235294, 0.819608, 1, 1, 1, 0.705882, 0, 0, 0, 0, 0, 0, 0.203922, 0.945098, 1, 1, 0.956863, 0.180392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.184314, 0.956863, 1, 1, 0.945098, 0.2, 0, 0, 0, 0, 0.0627451, 0.729412, 1, 1, 1, 0.466667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.47451, 1, 1, 1, 0.733333, 0.054902, 0, 0, 0, 0.0392157, 0.815686, 1, 1, 0.960784, 0.121569, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.137255, 0.960784, 1, 1, 0.815686, 0.0392157, 0, 0, 0, 0, 0.607843, 1, 1, 0.827451, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0392157, 0.835294, 1, 1, 0.603922, 0, 0, 0, 0, 0, 0.603922, 1, 1, 0.847059, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0392157, 0.85098, 1, 1, 0.607843, 0, 0, 0, 0, 0.0313726, 0.87451, 1, 1, 0.980392, 0.101961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.101961, 0.976471, 1, 1, 0.87451, 0.0313726, 0, 0, 0, 0.0627451, 0.580392, 1, 1, 1, 0.588235, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0392157, 0.584314, 1, 1, 1, 0.588235, 0.0627451, 0, 0, 0, 0, 0.156863, 0.913725, 1, 1, 0.984314, 0.505882, 0.054902, 0, 0, 0, 0, 0, 0, 0, 0.054902, 0.501961, 0.980392, 1, 1, 0.905882, 0.156863, 0, 0, 0, 0, 0, 0.0156863, 0.666667, 1, 1, 1, 0.992157, 0.839216, 0.490196, 0.211765, 0.207843, 0.207843, 0.207843, 0.207843, 0.494118, 0.839216, 0.992157, 1, 1, 1, 0.670588, 0.0156863, 0, 0, 0, 0, 0, 0.00784314, 0.239216, 0.796078, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.796078, 0.235294, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0.156863, 0.772549, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.772549, 0.156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054902, 0.0980392, 0.0235294, 0.0235294, 1, 1, 1, 1, 1, 0.0313726, 0.0313726, 0.0980392, 0.054902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0, 0, 0, 1, 0, 0, 0, 0.0392157, 0.00784314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0470588, 0.756863, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.984314, 0.584314, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.537255, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00784314, 0.231373, 0.74902, 1, 1, 1, 0.988235, 0.760784, 0.337255, 0.113725, 0.133333, 0.392157, 0.847059, 1, 1, 1, 0.992157, 0.607843, 0.129412, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.670588, 1, 1, 1, 0.952941, 0.141176, 0, 0, 0, 0, 0, 0.0313726, 0.239216, 0.996078, 1, 1, 0.988235, 0.423529, 0, 0, 0, 0, 0, 0, 0, 0.0235294, 0.776471, 1, 1, 0.976471, 0.243137, 0, 0, 0, 0, 0, 0, 0, 0.00784314, 0.419608, 0.992157, 1, 1, 0.52549, 0.00784314, 0, 0, 0, 0, 0, 0, 0.105882, 0.898039, 1, 1, 0.670588, 0.0392157, 0, 0, 0, 0, 0, 0, 0, 0, 0.113725, 0.870588, 1, 1, 0.635294, 0, 0, 0, 0, 0, 0, 0, 0.415686, 1, 1, 0.937255, 0.215686, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6, 1, 1, 0.831373, 0.054902, 0, 0, 0, 0, 0, 0, 0.901961, 1, 1, 0.988235, 0.101961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.345098, 1, 1, 0.972549, 0.196078, 0, 0, 0, 0, 0, 0.0313726, 0.890196, 1, 1, 0.984314, 0.109804, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.415686, 0.996078, 1, 1, 0.862745, 0, 0, 0, 0, 0, 0.0627451, 0.619608, 1, 1, 0.956863, 0.254902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.556863, 1, 1, 1, 0.694118, 0.0627451, 0, 0, 0, 0, 0, 0.2, 0.933333, 1, 1, 0.564706, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.756863, 1, 1, 1, 0.466667, 0, 0, 0, 0, 0, 0, 0.054902, 0.784314, 1, 1, 0.956863, 0.184314, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.305882, 0.988235, 1, 1, 1, 0.403922, 0, 0, 0, 0, 0, 0, 0, 0.701961, 1, 1, 1, 0.811765, 0.0235294, 0, 0, 0, 0, 0, 0, 0.0862745, 0.945098, 1, 1, 1, 1, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0.286275, 0.898039, 1, 1, 1, 0.968627, 0.611765, 0.172549, 0.0392157, 0.0470588, 0.223529, 0.737255, 1, 1, 1, 1, 1, 1, 0.403922, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.996078, 1, 1, 0.713726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.172549, 0.858824, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.996078, 0.780392, 0.960784, 1, 0.964706, 0.454902, 0.0313726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.196078, 0.372549, 0.792157, 0.945098, 0.980392, 1, 0.996078, 0.964706, 0.933333, 0.713726, 0.352941, 0.45098, 1, 1, 0.921569, 0.152941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0235294, 0.164706, 0.686275, 0.858824, 0.827451, 0.576471, 0.113725, 0, 0, 0.6, 1, 1, 0.827451, 0.054902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0392157, 0.764706, 1, 1, 0.662745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0823529, 0.956863, 1, 1, 0.466667, 0, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.415686, 0.643137, 0.321569, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.501961, 1, 1, 0.984314, 0.458824, 0, 0, 0, 0, 0, 0, 0, 0.0156863, 0.470588, 1, 1, 0.929412, 0.203922, 0, 0, 0, 0, 0, 0, 0, 0.0980392, 0.945098, 1, 1, 0.952941, 0.227451, 0.0156863, 0, 0, 0, 0, 0, 0, 0.0235294, 0.482353, 1, 1, 1, 0.717647, 0.054902, 0, 0, 0, 0, 0, 0.2, 0.803922, 1, 1, 1, 0.443137, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0.0862745, 0.878431, 1, 1, 0.988235, 0.831373, 0.490196, 0.211765, 0.207843, 0.262745, 0.639216, 0.937255, 1, 1, 1, 0.654902, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.396078, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.941176, 0.0980392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.690196, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.952941, 0.396078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.054902, 0.0980392, 0.0235294, 0.0235294, 1, 1, 0.0313726, 0.0156863, 0.0156863, 0.105882, 0.0313726, 0.0156863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
    };
    // load overlays
    for (int i = 0; i < 9; i++) {
        overlays[i] = Mat(OVERLAY_ROWS, OVERLAY_COLS, CV_32F, O[i]);
    }




    /*fstream fs;
    fs.open("../overlays/out.txt", fstream::out);
    fs << "float O[9][780] = {" << endl;

    // precomputed bottom-left corner offsets for number overlays
    vector<Point2i> textBlOffsets(9);
    for (int i = 0; i < 9; i++) {
        int baseline;
        Size textSize = getTextSize(numToString[i], FONT_FACE, FONT_SCALE, FONT_THICKNESS, &baseline);
        textBlOffsets[i] = Point2i(-textSize.width / 2, textSize.height / 2);

        Mat number = Mat::zeros(textSize.height + 4, textSize.width, CV_8U);
        putText(number, numToString[i], Point(0, number.rows-3), FONT_FACE, FONT_SCALE, Scalar(255), FONT_THICKNESS,
            CV_AA);

        //imwrite("../overlays/" + numToString[i] + ".png", number);
        
        fs << "{";
        for (int y = 0; y < 30; y++) {
            for (int x = 0; x < 26; x++) {
                uchar u = number.at<uchar>(Point(x, y));
                float a = u / 255.0f;
                if (y == 29 && x == 25)
                    fs << a;
                else
                    fs << a << ", ";
            }
        }
        
        if (i == 8)
            fs << "}" << endl;
        else
            fs << "}," << endl;
    }
    fs << "};" << endl;
    fs.close();
    */
    // =====================================================================================================================================


#if TESTING == 1
    string filename = "sudoku2.jpg";
    string filepath = "../" + filename;
    im = imread(filepath, CV_LOAD_IMAGE_COLOR);
    if (!im.data) {
        cout << "Could not open " << filepath << endl;
        return -1;
    }
    cvtColor(im, im, CV_BGR2RGBA); // matches what we expect the param to be
    //namedWindow("original image", WINDOW_AUTOSIZE);
    //imshow("original image", im);
#endif
    

    cvtColor(im, im, CV_RGBA2BGR);


    const int IM_ROWS = im.rows;
    const int IM_COLS = im.cols;
    const double IM_SQRT_RES = sqrtf(IM_ROWS * IM_COLS);


    //int64 A, B, C, D;
    //const double TICK_FREQ_MS = getTickFrequency()*0.001f;

    //C = getTickCount();

    // binarize image with adaptive thresholding

    //A = getTickCount();
    
    Mat im_gray;
    cvtColor(im, im_gray, CV_BGR2GRAY);
    // mean of nxn neighborhood of pixel minus offset is used as threshold
    Mat im_bin;
    {
        int blockSize = (int)((1.0 / 16.0) * 0.5 * IM_SQRT_RES) * 2 + 1;
        //cout << "adaptive thresholding blocksize " << blockSize << endl;
        int meanOffset = 12;
        adaptiveThreshold(im_gray, im_bin, 255, ADAPTIVE_THRESH_MEAN_C,
            THRESH_BINARY_INV, blockSize, meanOffset);
    }
    //B = getTickCount();
    //cout << "binarize: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;




    // scale image to some fixed height for faster processing
    const int IM_SCALED_ROWS = 600;
    const double IM_SCALE = (double)IM_SCALED_ROWS / IM_ROWS;
    const int IM_SCALED_COLS = round(IM_SCALE * IM_COLS);

    resize(im_bin, im_bin, Size(IM_SCALED_COLS, IM_SCALED_ROWS), 0.0, 0.0, INTER_AREA);
    threshold(im_bin, im_bin, 127, 255, CV_THRESH_BINARY);  // keep it binary

#if TESTING
    namedWindow("thesholded image", WINDOW_AUTOSIZE);
    imshow("thesholded image", im_bin);
#endif


    // remove everything except the largest blob, assumed to be the sudoku grid
    //A = getTickCount();
    Mat im_binblob;
    im_bin.copyTo(im_binblob);
    {
        int maxArea = 0;
        Point maxAreaPoint;
        for (int y = 0; y < IM_SCALED_ROWS; y++) {
            uchar *row = im_binblob.ptr(y);
            for (int x = 0; x < IM_SCALED_COLS; x++) {
                if (row[x] > 128) {
                    int area = floodFill(im_binblob, Point(x, y), Scalar(128));
                    if (area > maxArea) {
                        maxArea = area;
                        maxAreaPoint = Point(x, y);
                    }
                }
            }
        }
        if (maxArea == 0) {
#if TESTING == 0
            im_output = im_orig;
            return;
#else
            waitKey();
            return 0;
#endif
        }
        floodFill(im_binblob, maxAreaPoint, Scalar(255));
        threshold(im_binblob, im_binblob, 254, 255, CV_THRESH_BINARY);
    }
    //B = getTickCount();
    //cout << "find max blob: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;
#if TESTING
    namedWindow("max blob", WINDOW_AUTOSIZE);
    imshow("max blob", im_binblob);
#endif
    
    /*// find the contour of the grid
    //A = getTickCount();
    Mat im_edge = Mat::zeros(IM_SCALED_ROWS, IM_SCALED_COLS, CV_8U);
    for (int y = 1; y < IM_SCALED_ROWS - 1; y++) {
        uchar* row_above = im_binblob.ptr(y - 1);
        uchar* row = im_binblob.ptr(y);
        uchar* row_below = im_binblob.ptr(y + 1);
        uchar* edge_row = im_edge.ptr(y);
        for (int x = 1; x < IM_SCALED_COLS - 1; x++) {
            uchar center = row[x];
            if (!center) {
                edge_row[x] = 0;
                continue;
            }
            uchar top = row_above[x];
            uchar bottom = row_below[x];
            uchar left = row[x - 1];
            uchar right = row[x + 1];
            if (top && bottom && left && right) {
                edge_row[x] = 0;
            } else {
                edge_row[x] = 255;
            }
        }
    }
    //B = getTickCount();
    //cout << "manual contour: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;

    //namedWindow("manual contour", CV_WINDOW_AUTOSIZE);
    //imshow("manual contour", im_edge);
    */

    // find the four corners of the grid
    //A = getTickCount();
    vector<Point2f> corners(4);
    {
        // corners are, in order:
        // min projection onto <1,1>  (top left)    minSum
        // max projection onto <1,-1> (top right)   maxDiff
        // max projection onto <1,1> (bottom right) maxSum
        // min projection onto <1,-1> (bottom left) minDiff
        int largeEnough = IM_SCALED_COLS + IM_SCALED_ROWS;
        int maxSum = -largeEnough, minSum = largeEnough;
        int maxDiff = -largeEnough, minDiff = largeEnough;
        for (int y = 0; y < IM_SCALED_ROWS; y++) {
            uchar *row = im_binblob.ptr(y);
            for (int x = 0; x < IM_SCALED_COLS; x++) {
                if (row[x]) {
                    int sum = x + y;    // projection onto <1,1>
                    int diff = x - y;   // projection onto <1,-1>
                    if (sum < minSum) {
                        minSum = sum;
                        corners[0] = Point2f(x, y);
                    }
                    if (sum > maxSum) {
                        maxSum = sum;
                        corners[2] = Point2f(x, y);
                    }
                    if (diff < minDiff) {
                        minDiff = diff;
                        corners[3] = Point2f(x, y);
                    }
                    if (diff > maxDiff) {
                        maxDiff = diff;
                        corners[1] = Point2f(x, y);
                    }
                }
            }
        }
        // make sure the 4 corners are distinct
        if (corners[0] == corners[1] || corners[0] == corners[2]
            || corners[0] == corners[3] || corners[1] == corners[2]
            || corners[1] == corners[3] || corners[2] == corners[3]) {
#if TESTING == 0
            im_output = im_orig;
            return;
#else
            waitKey();
            return 0;
#endif
        }
    }
    //B = getTickCount();
    //cout << "find 4 corners: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;
    
    
    /*// draw corners
    Mat im_corners;
    im.copyTo(im_corners);
    for (int i = 0; i < 4; i++) {
        circle(im_corners, corners[i], 5, Scalar(255,0,0), 2, 8, 0);
    }
    namedWindow("4 corners", CV_WINDOW_AUTOSIZE);
    imshow("4 corners", im_corners);
    */



    // find homography and straighten grid
    //A = getTickCount();
    const int CELL_DIM = 51;    // make this odd
    const int GRID_DIM = 9 * CELL_DIM;
    const int GRID_PAD = 30;
    const int GRID_DIM_PAD = GRID_DIM + 2 * GRID_PAD;
    Mat im_grid;
    Mat gridHomography;
    {
        vector<Point2f> dstPoints;
        dstPoints.push_back(Point2f(GRID_PAD, GRID_PAD));
        dstPoints.push_back(Point2f(GRID_PAD + GRID_DIM, GRID_PAD));
        dstPoints.push_back(Point2f(GRID_PAD + GRID_DIM, GRID_PAD + GRID_DIM));
        dstPoints.push_back(Point2f(GRID_PAD, GRID_PAD + GRID_DIM));
        gridHomography = findHomography(corners, dstPoints, 0);
        warpPerspective(im_bin, im_grid, gridHomography, Size(GRID_DIM_PAD, GRID_DIM_PAD),
            INTER_NEAREST, BORDER_CONSTANT, Scalar(0));
    }
    //B = getTickCount();
    //cout << "homography transform: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;
#if TESTING
    namedWindow("grid", CV_WINDOW_AUTOSIZE);
    imshow("grid", im_grid); 
#endif


    // find best center of each grid cell with two-bar template matching

    vector<Point2i> cellCenters(81);
    Mat im_grid_thick;

    //A = getTickCount();
    {
        // dilate image for thicker lines
        {
            int SE_radius = 1;
            int SE_size = SE_radius * 2 + 1;
            //cout << "dilate SE size " << SE_size << endl;
            Mat dilate_SE = Mat::zeros(SE_size, SE_size, CV_8U);
            for (int y = 0; y < SE_size; y++)
                dilate_SE.ptr(y)[SE_radius] = 1;
            uchar* row = dilate_SE.ptr(SE_radius);
            for (int x = 0; x < SE_size; x++)
                row[x] = 1;
            dilate(im_grid, im_grid_thick, dilate_SE);
        }

        const int CELL_HALF_DIM = (CELL_DIM - 1) / 2;
        const int BAR_HALF_THICKNESS = 2;
        const int BAR_THICKNESS = 2 * BAR_HALF_THICKNESS;
        const int ACCEPT_WIDTH = 15;

        // bounds for horizontal bars
        Point2i hor_r1_min;
        hor_r1_min.x = -CELL_HALF_DIM;
        hor_r1_min.y = -CELL_HALF_DIM - BAR_HALF_THICKNESS;
        Point2i hor_r1_max;
        hor_r1_max.x = hor_r1_min.x + CELL_DIM;
        hor_r1_max.y = hor_r1_min.y + BAR_THICKNESS;
        Point2i hor_s1_min(hor_r1_min.x + ACCEPT_WIDTH, hor_r1_min.y);
        Point2i hor_s1_max(hor_r1_max.x - ACCEPT_WIDTH, hor_r1_max.y);

        Point2i hor_r2_min = hor_r1_min + Point2i(0, CELL_DIM);
        Point2i hor_r2_max = hor_r1_max + Point2i(0, CELL_DIM);
        Point2i hor_s2_min = hor_s1_min + Point2i(0, CELL_DIM);
        Point2i hor_s2_max = hor_s1_max + Point2i(0, CELL_DIM);
        // bounds for vertical bars (simply the transpose of horizontal bar bounds)
        Point2i vert_r1_min(hor_r1_min.y, hor_r1_min.x);
        Point2i vert_r1_max(hor_r1_max.y, hor_r1_max.x);
        Point2i vert_r2_min(hor_r2_min.y, hor_r2_min.x);
        Point2i vert_r2_max(hor_r2_max.y, hor_r2_max.x);
        Point2i vert_s1_min(hor_s1_min.y, hor_s1_min.x);
        Point2i vert_s1_max(hor_s1_max.y, hor_s1_max.x);
        Point2i vert_s2_min(hor_s2_min.y, hor_s2_min.x);
        Point2i vert_s2_max(hor_s2_max.y, hor_s2_max.x);

        // calculate integral image
        Mat im_grid_integral;
        integral(im_grid_thick, im_grid_integral, CV_32S);

        const int SEARCH_RADIUS = 15;   // from ideal center
        for (int i = 0; i < 9; i++) {
            // find ideal center of cell in row i, col j
            float ideal_center_y = round((i + 0.5) / 9 * GRID_DIM) + GRID_PAD;
            for (int j = 0; j < 9; j++) {
                // find ideal center of cell in row i, col j
                float ideal_center_x = round((j + 0.5) / 9 * GRID_DIM) + GRID_PAD;

                /*
                // search left to right with template of two vertical bars
                Point2i LR_best = twoRectsMatch(im_grid_integral,
                    vert_r1_min, vert_r1_max, vert_r2_min, vert_r2_max,
                    Point2i(ideal_center_x - SEARCH_RADIUS, ideal_center_y),
                    Point2i(ideal_center_x + SEARCH_RADIUS + 1, ideal_center_y + 1)
                    );

                // search top to bottom with template of two horizontal bars
                Point2i LRTB_best = twoRectsMatch(im_grid_integral,
                    hor_r1_min, hor_r1_max, hor_r2_min, hor_r2_max,
                    Point2i(LR_best.x, ideal_center_y - SEARCH_RADIUS),
                    Point2i(LR_best.x + 1, ideal_center_y + SEARCH_RADIUS + 1)
                    );
                */

                // search top to bottom with template of two horizontal bars
                Point2i TB_best = twoRectsMatch(im_grid_integral,
                    hor_r1_min, hor_r1_max, hor_r2_min, hor_r2_max,
                    hor_s1_min, hor_s1_max, hor_s2_min, hor_s2_max,
                    Point2i(ideal_center_x, ideal_center_y - SEARCH_RADIUS),
                    Point2i(ideal_center_x + 1, ideal_center_y + SEARCH_RADIUS + 1)
                    );
                // search left to right with template of two vertical bars
                Point2i LRTB_best = twoRectsMatch(im_grid_integral,
                    vert_r1_min, vert_r1_max, vert_r2_min, vert_r2_max,
                    vert_s1_min, vert_s1_max, vert_s2_min, vert_s2_max,
                    Point2i(ideal_center_x - SEARCH_RADIUS, TB_best.y),
                    Point2i(ideal_center_x + SEARCH_RADIUS + 1, TB_best.y + 1)
                    );
                // search top to bottom again with template of two horizontal bars
                Point2i LRTB_best2 = twoRectsMatch(im_grid_integral,
                    hor_r1_min, hor_r1_max, hor_r2_min, hor_r2_max,
                    hor_s1_min, hor_s1_max, hor_s2_min, hor_s2_max,
                    Point2i(LRTB_best.x, ideal_center_y - SEARCH_RADIUS),
                    Point2i(LRTB_best.x + 1, ideal_center_y + SEARCH_RADIUS + 1)
                    );
                cellCenters[9 * i + j] = LRTB_best2;
            }
        }
    }
    //B = getTickCount();
    //cout << "cell centers: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;


    // draw centers
#if TESTING
    Mat im_cell_centers;
    cvtColor(im_grid, im_cell_centers, CV_GRAY2RGB);
    for (int i = 0; i < cellCenters.size(); i++) {
        circle(im_cell_centers, cellCenters[i], 3, Scalar(0, 255, 0), 2, 8, 0);
    }
    namedWindow("cell centers", CV_WINDOW_AUTOSIZE);
    imshow("cell centers", im_cell_centers);
#endif

    // extract numbers from grid
    vector<Mat> numbers(cellCenters.size());
    Mat testMean = Mat::zeros(Size(NUMRECT_DIM, NUMRECT_DIM), CV_32F);
    int numNumbers = 0;

    //A = getTickCount();
    {
        const int CELLRECT_HALF_DIM = 20;
        const int CELLRECT_DIM = 2 * CELLRECT_HALF_DIM + 1;
        const int CELLRECT_PIXELS = CELLRECT_DIM * CELLRECT_DIM;

        Point2i cellRectMin(-CELLRECT_HALF_DIM, -CELLRECT_HALF_DIM);
        Point2i cellRectMax(CELLRECT_HALF_DIM + 1, CELLRECT_HALF_DIM + 1);
        Rect cellRect(cellRectMin, cellRectMax);

        const int CELL_MIN_WHITE_PIX = round(CELLRECT_PIXELS / 16);
        const int CELL_MAX_WHITE_PIX = round(CELLRECT_PIXELS * 0.55);

        for (int i = 0; i < cellCenters.size(); i++) {

            // crop out a square around the cell center to get the number
            Mat im_num = im_grid(cellRect + cellCenters[i]);

            // if square has too few or too many white pixels, it's assumed blank
            int whitePix = countNonZero(im_num);
            if (whitePix < CELL_MIN_WHITE_PIX ||
                whitePix > CELL_MAX_WHITE_PIX) {
                continue;
            }

            // morphological close ????

            // find bounds of largest blob in the square, zero all other blobs
            int maxArea = 0;
            Point maxBlobPoint;
            for (int y = 0; y < CELLRECT_DIM; y++) {
                uchar *row = im_num.ptr(y);
                for (int x = 0; x < CELLRECT_DIM; x++) {
                    if (row[x] > 128) {
                        int area = floodFill(im_num, Point(x, y), Scalar(128), 0, Scalar(), Scalar(), 8);
                        if (area > maxArea) {
                            maxArea = area;
                            maxBlobPoint = Point(x, y);
                        }
                    }
                }
            }
            Rect blobRect;
            floodFill(im_num, maxBlobPoint, Scalar(255), &blobRect, Scalar(), Scalar(), 8);
            threshold(im_num, im_num, 254, 255, CV_THRESH_BINARY);

            
            // take bounding rect of largest blob and scale it so its height matches
            // NUMRECT_DIM without stretching it.
            Mat numCroppedScaled;
            double scale = (double)NUMRECT_DIM / blobRect.height;
            int width = round(blobRect.width * scale * 0.5) * 2;
            if (width == 0) {
                continue;
            }
            resize(im_num(blobRect), numCroppedScaled, Size(width, NUMRECT_DIM),
                0.0, 0.0, INTER_LINEAR);

            // pad or crop left and right sides to make it square
            int widthDiff = NUMRECT_DIM - numCroppedScaled.cols;
            if (widthDiff > 0) {
                int leftPad = widthDiff / 2;
                int rightPad = widthDiff - leftPad;
                copyMakeBorder(numCroppedScaled, numCroppedScaled, 0, 0, leftPad, rightPad,
                    BORDER_CONSTANT, Scalar(0));
            } else {
                int leftCrop = -widthDiff / 2;
                numCroppedScaled = numCroppedScaled(Rect(leftCrop, 0, NUMRECT_DIM, NUMRECT_DIM));
            }

            assert(numCroppedScaled.cols == NUMRECT_DIM);
            assert(numCroppedScaled.rows == NUMRECT_DIM);


            // FOR TESTING
            //stringstream ss;
            //ss << "../out/" << filename << "_" << (i / 9) << "_" << (i % 9) << ".png";
            //imwrite(ss.str(), numCroppedScaled);


            // convert to float image, accumulate sum
            numCroppedScaled.convertTo(numCroppedScaled, CV_32F, 1 / 255.0);
            testMean += numCroppedScaled;
            numNumbers++;

            numbers[i] = numCroppedScaled;
        }

    }
    if (numNumbers < 17) {   // sudokus need at least 17 values to have a unique solution
#if TESTING == 0
        im_output = im_orig;
        return;
#else
        waitKey();
        return 0;
#endif
    }
    testMean /= numNumbers;

    //B = getTickCount();
    //cout << "digit cropping: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;
    
    //namedWindow("cell", CV_WINDOW_AUTOSIZE);
    //imshow("cell", numbers_bin[36]);


    // match extracted numbers to templates
    int values[9][9];
    //A = getTickCount();
    {
        for (int i = 0; i < numbers.size(); i++) {
            Mat& number = numbers[i];
            if (!number.data) {
                values[i / 9][i % 9] = 0;
                continue;
            }

            // subtract training avg from this number image
            Mat numberSubMean = number - testMean; //trainMean;

            // calculate square error with each template; record lowest
            float minMse = 100000000000.0;
            int minIndex = -1;
            for (int j = 0; j < 9; j++) {
                Mat& numTemplate = templates[j];
                Mat diff = numberSubMean - numTemplate;
                Mat diffSq;
                multiply(diff, diff, diffSq, 1.0);
                float mse = sum(diffSq)[0];
                if (mse < minMse) {
                    minMse = mse;
                    minIndex = j;
                }
            }
            values[i / 9][i % 9] = minIndex + 1;
        }
    }
    //B = getTickCount();
    //cout << "digit matching: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;

    // print out recognized digit values
    /*printf("\n");
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (values[i][j])
                printf(" %d", values[i][j]);
            else
                printf(" -");
        }
        printf("\n");
    }
    */
    

    // solve sudoku

    int solvedValues[9][9];

    // TEMP FILLER
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if (values[i][j])
                solvedValues[i][j] = values[i][j];
            else
                solvedValues[i][j] = round(1.0 + 8.0*rand() / (double)RAND_MAX);
        }
    }



#if 1


    // compute output image with original and solved values overlaid

    //A = getTickCount();
    {
        // write solved values onto a grayscale mask at grid cell centers;
        Mat im_gridMask = Mat::zeros(Size(GRID_DIM_PAD, GRID_DIM_PAD), CV_32FC2);
        Rect overlayCenteredRect = Rect(-OVERLAY_COLS / 2, -OVERLAY_ROWS / 2,
                                        OVERLAY_COLS, OVERLAY_ROWS);
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (!solvedValues[i][j])
                    continue;

                // row i, col j
                Point2i& cellCenter = cellCenters[9 * i + j];
                int value = solvedValues[i][j];
                
                /*string text = numToString[value - 1];
                Point2i bl = cellCenter + textBlOffsets[value - 1];
                Scalar color = values[i][j] ? Scalar(1.0, 0.0) : Scalar(0.0, 1.0);
                putText(im_gridMask, text, bl, FONT_FACE, FONT_SCALE, color, FONT_THICKNESS, CV_AA);
                */
                
                Mat& overlay = overlays[value - 1];
                Rect overlayRect = overlayCenteredRect + cellCenter;
                int fromTo[2];
                fromTo[0] = 0;
                fromTo[1] = (values[i][j]) ? 0 : 1;
                Mat dst = im_gridMask(overlayRect);
                mixChannels(&overlay, 1, &dst, 1, fromTo, 1);
            }
        }
        // transform it back to the original unscaled image's perspective
        Mat im_mask;
        Mat scaledHomography = gridHomography;
        scaledHomography.col(0) *= IM_SCALE;
        scaledHomography.col(1) *= IM_SCALE;
        warpPerspective(im_gridMask, im_mask, scaledHomography, Size(IM_COLS, IM_ROWS),
            INTER_LINEAR | WARP_INVERSE_MAP, BORDER_CONSTANT, Scalar(0.0, 0.0));

        assert(im_mask.type() == CV_32FC2);
        assert(im.type() == CV_8UC3);

        // combine original image and some solid color using the mask values as alpha values
        Vec3b valuesColor(255, 0, 0);
        Vec3b solvedValuesColor(0, 255, 0);
        im_output = Mat::zeros(Size(IM_COLS, IM_ROWS), CV_8UC3);
        for (int y = 0; y < IM_ROWS; y++) {
            for (int x = 0; x < IM_COLS; x++) {
                Vec2f alpha = im_mask.at<Vec2f>(Point(x, y));
                Vec3b original = im.at<Vec3b>(Point(x, y));
                if (alpha[0] > 0.0f) {
                    Vec3b output = original * (1.0f - alpha[0]) + valuesColor * alpha[0];
                    im_output.at<Vec3b>(Point(x, y)) = output;
                } else if (alpha[1] > 0.0f) {
                    Vec3b output = original * (1.0f - alpha[1]) + solvedValuesColor * alpha[1];
                    im_output.at<Vec3b>(Point(x, y)) = output;
                } else {
                    im_output.at<Vec3b>(Point(x, y)) = original;
                }
            }
        }
    }

    cvtColor(im_output, im_output, CV_BGR2RGBA);


    //B = getTickCount();
    //cout << "values overlay: " << ((B - A) / TICK_FREQ_MS) << " ms" << endl;

    //D = getTickCount();
    //cout << endl << "TOTAL: " << ((D - C) / TICK_FREQ_MS) << " ms" << endl;
#endif

#if TESTING
    cvtColor(im_output, im_output, CV_RGBA2BGR);
    namedWindow("output", CV_WINDOW_AUTOSIZE);
    imshow("output", im_output);
    waitKey();
#endif

#if TESTING
    return 0;
#endif

}// end function
}// end extern C



int getRectSum(const Mat& integral, const Point2i& min, const Point2i& max) {
    const int* min_row = integral.ptr<int>(min.y);
    const int* max_row = integral.ptr<int>(max.y);
    return (max_row[max.x] - max_row[min.x] - min_row[max.x] + min_row[min.x]);
}

// [r1_min, r1_max) are bounds of first rect relative to the center of this template
// [r2_min, r2_max) are bounds of the second rect
// [s1_min, s1_max), [s1_min, s1_max) are bounds of rects to whose sum is subtracted
// instead of added
// [center_min, center_max) are the bounds of the rect in which the center can
// move around to find a max match.
// centers that gave the max template sum value are recorded

Point2i twoRectsMatch(const Mat& integral,
    const Point2i& r1_min, const Point2i& r1_max,
    const Point2i& r2_min, const Point2i& r2_max,
    const Point2i& s1_min, const Point2i& s1_max,
    const Point2i& s2_min, const Point2i& s2_max,
    const Point2i& center_min, const Point2i& center_max) {

    int maxResponse = -2000000000;
    Point2i maxMatchesSum(0);
    int numMaxMatches = 0;
    for (int x = center_min.x; x < center_max.x; x++) {
        for (int y = center_min.y; y < center_max.y; y++) {
            
            Point2i center(x, y);
            
            int r1_sum = getRectSum(integral, center + r1_min, center + r1_max);
            int r2_sum = getRectSum(integral, center + r2_min, center + r2_max);
            int s1_sum = getRectSum(integral, center + s1_min, center + s1_max);
            int s2_sum = getRectSum(integral, center + s2_min, center + s2_max);

            int response = min(r1_sum - s1_sum, r2_sum - s2_sum);

            if (response > maxResponse) {
                maxResponse = response;
                maxMatchesSum = center;
                numMaxMatches = 1;
            } else if (response == maxResponse) {
                maxMatchesSum += center;
                numMaxMatches++;
            }
        }
    }
    return maxMatchesSum * (1.0 / numMaxMatches);
}


